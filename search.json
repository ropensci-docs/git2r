[{"path":"https://docs.ropensci.org/git2r/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stefan Widgren. Author, maintainer. Gabor Csardi. Contributor. Gregory Jefferis. Contributor. Jennifer Bryan. Contributor. Jeroen Ooms. Contributor. Jim Hester. Contributor. John Blischak. Contributor. Karthik Ram. Contributor. Peter Carbonetto. Contributor. Scott Chamberlain. Contributor. Thomas Rosendal. Contributor.","code":""},{"path":"https://docs.ropensci.org/git2r/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Widgren S (2024). git2r: Provides Access Git Repositories. R package version 0.35.0.9000, https://github.com/ropensci/git2r, https://docs.ropensci.org/git2r/.","code":"@Manual{,   title = {git2r: Provides Access to Git Repositories},   author = {Stefan Widgren},   year = {2024},   note = {R package version 0.35.0.9000,     https://github.com/ropensci/git2r},   url = {https://docs.ropensci.org/git2r/}, }"},{"path":"https://docs.ropensci.org/git2r/index.html","id":"introduction","dir":"","previous_headings":"","what":"Provides Access to Git Repositories","title":"Provides Access to Git Repositories","text":"git2r package gives programmatic access Git repositories R. Internally package uses libgit2 library pure C implementation Git core methods. information libgit2, check libgit2’s website (http://libgit2.github.com). Suggestions, bugs, forks pull requests appreciated. Get touch.","code":""},{"path":"https://docs.ropensci.org/git2r/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Provides Access to Git Repositories","text":"install version available CRAN: install development version git2r, ’s easiest use devtools package:","code":"install.packages(\"git2r\") # install.packages(\"remotes\") library(remotes) install_github(\"ropensci/git2r\")"},{"path":[]},{"path":"https://docs.ropensci.org/git2r/index.html","id":"repository","dir":"","previous_headings":"Usage","what":"Repository","title":"Provides Access to Git Repositories","text":"central object git2r package S3 class git_repository. following three methods can instantiate repository; init, repository clone.","code":""},{"path":"https://docs.ropensci.org/git2r/index.html","id":"create-a-new-repository","dir":"","previous_headings":"Usage > Repository","what":"Create a new repository","title":"Provides Access to Git Repositories","text":"Create new repository temporary directory using init","code":"library(git2r) #> Loading required package: methods ## Create a temporary directory to hold the repository path <- tempfile(pattern=\"git2r-\") dir.create(path)  ## Initialize the repository repo <- init(path)  ## Display a brief summary of the new repository repo #> Local:    /tmp/Rtmp7CXPlx/git2r-1ae2305c0e8d/ #> Head:     nothing commited (yet) ## Check if repository is bare is_bare(repo) #> [1] FALSE ## Check if repository is empty is_empty(repo) #> [1] TRUE"},{"path":"https://docs.ropensci.org/git2r/index.html","id":"create-a-new-bare-repository","dir":"","previous_headings":"Usage > Repository","what":"Create a new bare repository","title":"Provides Access to Git Repositories","text":"","code":"## Create a temporary directory to hold the repository path <- tempfile(pattern=\"git2r-\") dir.create(path)  ## Initialize the repository repo <- init(path, bare=TRUE)  ## Check if repository is bare is_bare(repo) #> [1] TRUE"},{"path":"https://docs.ropensci.org/git2r/index.html","id":"clone-a-repository","dir":"","previous_headings":"Usage > Repository","what":"Clone a repository","title":"Provides Access to Git Repositories","text":"","code":"## Create a temporary directory to hold the repository path <- file.path(tempfile(pattern=\"git2r-\"), \"git2r\") dir.create(path, recursive=TRUE)  ## Clone the git2r repository repo <- clone(\"https://github.com/ropensci/git2r\", path) #> cloning into '/tmp/Rtmp7CXPlx/git2r-1ae27d811539/git2r'... #> Receiving objects:   1% (24/2329),   12 kb #> Receiving objects:  11% (257/2329),   60 kb #> Receiving objects:  21% (490/2329),  100 kb #> Receiving objects:  31% (722/2329),  125 kb #> Receiving objects:  41% (955/2329),  237 kb #> Receiving objects:  51% (1188/2329),  574 kb #> Receiving objects:  61% (1421/2329), 1014 kb #> Receiving objects:  71% (1654/2329), 1350 kb #> Receiving objects:  81% (1887/2329), 1733 kb #> Receiving objects:  91% (2120/2329), 2614 kb #> Receiving objects: 100% (2329/2329), 2641 kb, done. ## Summary of repository summary(repo) #> Remote:   @ origin (https://github.com/ropensci/git2r) #> Local:    master /tmp/Rtmp7CXPlx/git2r-1ae27d811539/git2r/ #> #> Branches:          1 #> Tags:              0 #> Commits:         320 #> Contributors:      3 #> Ignored files:     0 #> Untracked files:   0 #> Unstaged files:    0 #> Staged files:      0 ## List all references in repository references(repo) #> $`refs/heads/master` #> [6fb440] master #> #> $`refs/remotes/origin/master` #> [6fb440] origin/master ## List all branches in repository branches(repo) #> [[1]] #> [6fb440] (Local) (HEAD) master #> #> [[2]] #> [6fb440] (origin @ https://github.com/ropensci/git2r) master"},{"path":"https://docs.ropensci.org/git2r/index.html","id":"open-an-existing-repository","dir":"","previous_headings":"Usage > Repository","what":"Open an existing repository","title":"Provides Access to Git Repositories","text":"","code":"## Open an existing repository repo <- repository(path)  ## Workdir of repository workdir(repo) #> [1] \"/tmp/Rtmp7CXPlx/git2r-1ae27d811539/git2r/\" ## List all commits in repository commits(repo)[[1]] # Truncated here for readability #> Commit:  6fb440133765e80649de8d714eaea17b114bd0a7 #> Author:  Stefan Widgren <stefan.widgren@gmail.com> #> When:    2014-04-22 21:43:19 #> Summary: Fixed clone progress to end line with newline ## Get HEAD of repository repository_head(repo) #> [6fb440] (Local) (HEAD) master ## Check if HEAD is head is_head(repository_head(repo)) #> [1] TRUE ## Check if HEAD is local is_local(repository_head(repo)) #> [1] TRUE ## List all tags in repository tags(repo) #> list()"},{"path":"https://docs.ropensci.org/git2r/index.html","id":"configuration","dir":"","previous_headings":"Usage","what":"Configuration","title":"Provides Access to Git Repositories","text":"","code":"config(repo, user.name=\"Git2r Readme\", user.email=\"git2r.readme@example.org\")  ## Display configuration config(repo) #> global: #>         core.autocrlf=input #> local: #>         branch.master.merge=refs/heads/master #>         branch.master.remote=origin #>         core.bare=false #>         core.filemode=true #>         core.logallrefupdates=true #>         core.repositoryformatversion=0 #>         remote.origin.fetch=+refs/heads/*:refs/remotes/origin/* #>         remote.origin.url=https://github.com/ropensci/git2r #>         user.email=git2r.readme@example.org #>         user.name=Git2r Readme"},{"path":"https://docs.ropensci.org/git2r/index.html","id":"commit","dir":"","previous_headings":"Usage","what":"Commit","title":"Provides Access to Git Repositories","text":"","code":"## Create a new file writeLines(\"Hello world!\", file.path(path, \"test.txt\"))  ## Add file and commit add(repo, \"test.txt\") commit(repo, \"Commit message\") #> Commit:  0a6af48cedf43208bde34230662280514e0956eb #> Author:  Git2r Readme <git2r.readme@example.org> #> When:    2014-04-22 21:44:57 #> Summary: Commit message"},{"path":"https://docs.ropensci.org/git2r/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Provides Access to Git Repositories","text":"git2r package licensed GPLv2.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/add.html","id":null,"dir":"Reference","previous_headings":"","what":"Add file(s) to index — add","title":"Add file(s) to index — add","text":"Add file(s) index","code":""},{"path":"https://docs.ropensci.org/git2r/reference/add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add file(s) to index — add","text":"","code":"add(repo = \".\", path = NULL, force = FALSE)"},{"path":"https://docs.ropensci.org/git2r/reference/add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add file(s) to index — add","text":"repo path repository git_repository object. Default '.' path Character vector file names shell glob patterns matched files repository's working directory. file matches added index (either updating existing entry adding new entry). force Add ignored files. Default FALSE.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add file(s) to index — add","text":"invisible(NULL)","code":""},{"path":"https://docs.ropensci.org/git2r/reference/add.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add file(s) to index — add","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create a file writeLines(\"a\", file.path(path, \"a.txt\"))  ## Add file to repository and view status add(repo, \"a.txt\") status(repo)  ## Add file with a leading './' when the repository working ## directory is the current working directory setwd(path) writeLines(\"b\", file.path(path, \"b.txt\")) add(repo, \"./b.txt\") status(repo)  ## Add a file in a sub-folder with sub-folder as the working ## directory. Create a file in the root of the repository ## working directory that will remain untracked. dir.create(file.path(path, \"sub_dir\")) setwd(\"./sub_dir\") writeLines(\"c\", file.path(path, \"c.txt\")) writeLines(\"c\", file.path(path, \"sub_dir/c.txt\")) add(repo, \"c.txt\") status(repo)  ## Add files with glob expansion when the current working ## directory is outside the repository's working directory. setwd(tempdir()) dir.create(file.path(path, \"glob_dir\")) writeLines(\"d\", file.path(path, \"glob_dir/d.txt\")) writeLines(\"e\", file.path(path, \"glob_dir/e.txt\")) writeLines(\"f\", file.path(path, \"glob_dir/f.txt\")) writeLines(\"g\", file.path(path, \"glob_dir/g.md\")) add(repo, \"glob_dir/*txt\") status(repo)  ## Add file with glob expansion with a relative path when ## the current working directory is inside the repository's ## working directory. setwd(path) add(repo, \"./glob_dir/*md\") status(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/ahead_behind.html","id":null,"dir":"Reference","previous_headings":"","what":"Ahead Behind — ahead_behind","title":"Ahead Behind — ahead_behind","text":"Count number unique commits two commit objects.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/ahead_behind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ahead Behind — ahead_behind","text":"","code":"ahead_behind(local = NULL, upstream = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/ahead_behind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ahead Behind — ahead_behind","text":"local git_commit object. Can also tag branch, case commit target tag branch. upstream git_commit object. Can also tag branch, case commit target tag branch.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/ahead_behind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ahead Behind — ahead_behind","text":"integer vector length 2 number commits     upstream commit ahead behind local commit","code":""},{"path":"https://docs.ropensci.org/git2r/reference/ahead_behind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ahead Behind — ahead_behind","text":"","code":"if (FALSE) { # \\dontrun{ ## Create a directory in tempdir path <- tempfile(pattern=\"git2r-\") dir.create(path)  ## Initialize a repository repo <- init(path) config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create a file, add and commit lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path, \"test.txt\")) add(repo, \"test.txt\") commit_1 <- commit(repo, \"Commit message 1\") tag_1 <- tag(repo, \"Tagname1\", \"Tag message 1\")  # Change file and commit lines <- c(   \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\",   \"eiusmod tempor incididunt ut labore et dolore magna aliqua.\") writeLines(lines, file.path(path, \"test.txt\")) add(repo, \"test.txt\") commit_2 <- commit(repo, \"Commit message 2\") tag_2 <- tag(repo, \"Tagname2\", \"Tag message 2\")  ahead_behind(commit_1, commit_2) ahead_behind(tag_1, tag_2) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/as.data.frame.git_repository.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce Git repository to a data.frame — as.data.frame.git_repository","title":"Coerce Git repository to a data.frame — as.data.frame.git_repository","text":"commits repository coerced data.frame","code":""},{"path":"https://docs.ropensci.org/git2r/reference/as.data.frame.git_repository.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce Git repository to a data.frame — as.data.frame.git_repository","text":"","code":"# S3 method for class 'git_repository' as.data.frame(x, ...)"},{"path":"https://docs.ropensci.org/git2r/reference/as.data.frame.git_repository.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce Git repository to a data.frame — as.data.frame.git_repository","text":"x repository object ... Additional arguments. used.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/as.data.frame.git_repository.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce Git repository to a data.frame — as.data.frame.git_repository","text":"data.frame","code":""},{"path":"https://docs.ropensci.org/git2r/reference/as.data.frame.git_repository.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce Git repository to a data.frame — as.data.frame.git_repository","text":"data.frame following columns: sha 40 character hexadecimal string SHA-1 summary short \"summary\" git commit message. message full message commit author full name author email email author time commit happened","code":""},{"path":"https://docs.ropensci.org/git2r/reference/as.data.frame.git_repository.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce Git repository to a data.frame — as.data.frame.git_repository","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create three files and commit writeLines(\"First file\",  file.path(path, \"example-1.txt\")) writeLines(\"Second file\", file.path(path, \"example-2.txt\")) writeLines(\"Third file\",  file.path(path, \"example-3.txt\")) add(repo, \"example-1.txt\") commit(repo, \"Commit first file\") add(repo, \"example-2.txt\") commit(repo, \"Commit second file\") add(repo, \"example-3.txt\") commit(repo, \"Commit third file\")  ## Coerce commits to a data.frame df <- as.data.frame(repo) df } # }"},{"path":"https://docs.ropensci.org/git2r/reference/as.data.frame.git_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce entries in a git_tree to a data.frame — as.data.frame.git_tree","title":"Coerce entries in a git_tree to a data.frame — as.data.frame.git_tree","text":"entries tree coerced data.frame","code":""},{"path":"https://docs.ropensci.org/git2r/reference/as.data.frame.git_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce entries in a git_tree to a data.frame — as.data.frame.git_tree","text":"","code":"# S3 method for class 'git_tree' as.data.frame(x, ...)"},{"path":"https://docs.ropensci.org/git2r/reference/as.data.frame.git_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce entries in a git_tree to a data.frame — as.data.frame.git_tree","text":"x tree object ... Additional arguments. used.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/as.data.frame.git_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce entries in a git_tree to a data.frame — as.data.frame.git_tree","text":"data.frame","code":""},{"path":"https://docs.ropensci.org/git2r/reference/as.data.frame.git_tree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce entries in a git_tree to a data.frame — as.data.frame.git_tree","text":"data.frame following columns: filemode UNIX file attributes tree entry type String representation tree entry type sha sha tree entry name filename tree entry","code":""},{"path":"https://docs.ropensci.org/git2r/reference/as.data.frame.git_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce entries in a git_tree to a data.frame — as.data.frame.git_tree","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) dir.create(file.path(path, \"subfolder\")) repo <- init(path)  ## Create a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create three files and commit writeLines(\"First file\",  file.path(path, \"example-1.txt\")) writeLines(\"Second file\", file.path(path, \"subfolder/example-2.txt\")) writeLines(\"Third file\",  file.path(path, \"example-3.txt\")) add(repo, c(\"example-1.txt\", \"subfolder/example-2.txt\", \"example-3.txt\")) commit(repo, \"Commit message\")  ## Display tree tree(last_commit(repo))  ## Coerce tree to a data.frame df <- as.data.frame(tree(last_commit(repo))) df } # }"},{"path":"https://docs.ropensci.org/git2r/reference/as.list.git_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce entries in a git_tree to a list of entry objects — as.list.git_tree","title":"Coerce entries in a git_tree to a list of entry objects — as.list.git_tree","text":"Coerce entries git_tree list entry objects","code":""},{"path":"https://docs.ropensci.org/git2r/reference/as.list.git_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce entries in a git_tree to a list of entry objects — as.list.git_tree","text":"","code":"# S3 method for class 'git_tree' as.list(x, ...)"},{"path":"https://docs.ropensci.org/git2r/reference/as.list.git_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce entries in a git_tree to a list of entry objects — as.list.git_tree","text":"x tree object ... Unused","code":""},{"path":"https://docs.ropensci.org/git2r/reference/as.list.git_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce entries in a git_tree to a list of entry objects — as.list.git_tree","text":"list entry objects","code":""},{"path":"https://docs.ropensci.org/git2r/reference/as.list.git_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce entries in a git_tree to a list of entry objects — as.list.git_tree","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) dir.create(file.path(path, \"subfolder\")) repo <- init(path)  ## Create a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create three files and commit writeLines(\"First file\",  file.path(path, \"example-1.txt\")) writeLines(\"Second file\", file.path(path, \"subfolder/example-2.txt\")) writeLines(\"Third file\",  file.path(path, \"example-3.txt\")) add(repo, c(\"example-1.txt\", \"subfolder/example-2.txt\", \"example-3.txt\")) commit(repo, \"Commit message\")  ## Inspect size of each blob in tree invisible(lapply(as(tree(last_commit(repo)), \"list\"),   function(obj) {     if (is_blob(obj))       summary(obj)     NULL   })) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/blame.html","id":null,"dir":"Reference","previous_headings":"","what":"Get blame for file — blame","title":"Get blame for file — blame","text":"Get blame file","code":""},{"path":"https://docs.ropensci.org/git2r/reference/blame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get blame for file — blame","text":"","code":"blame(repo = \".\", path = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/blame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get blame for file — blame","text":"repo path repository git_repository object. Default '.' path Path file consider","code":""},{"path":"https://docs.ropensci.org/git2r/reference/blame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get blame for file — blame","text":"git_blame object following entries: path path file blame hunks List blame hunks repo git_repository contains file lines_in_hunk number lines hunk final_commit_id sha commit line last changed final_start_line_number 1-based line number hunk begins, final     version file final_signature Final committer orig_commit_id sha commit hunk found. usually     'final_commit_id'. orig_start_line_number 1-based line number hunk begins file      named 'orig_path' commit specified 'orig_commit_id'. orig_signature Origin committer orig_path path file hunk originated, commit     specified 'orig_commit_id' boundary TRUE iff hunk tracked boundary commit. repo git_repository object contains blame hunk","code":""},{"path":"https://docs.ropensci.org/git2r/reference/blame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get blame for file — blame","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a first user and commit a file config(repo, user.name = \"Alice\", user.email = \"alice@example.org\") writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Create a second user and change the file config(repo, user.name = \"Bob\", user.email = \"bob@example.org\") writeLines(c(\"Hello world!\", \"HELLO WORLD!\", \"HOLA\"),            file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"Second commit message\")  ## Check blame blame(repo, \"example.txt\") } # }"},{"path":"https://docs.ropensci.org/git2r/reference/blob_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create blob from file on disk — blob_create","title":"Create blob from file on disk — blob_create","text":"Read file filesystem write content Object Database loose blob. method vectorized accepts vector files create blobs .","code":""},{"path":"https://docs.ropensci.org/git2r/reference/blob_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create blob from file on disk — blob_create","text":"","code":"blob_create(repo = \".\", path = NULL, relative = TRUE)"},{"path":"https://docs.ropensci.org/git2r/reference/blob_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create blob from file on disk — blob_create","text":"repo repository blob(s) written. Can bare repository. git_repository object, path repository, NULL.  repo argument NULL, repository searched discover_repository current working directory. path file(s) blob created. relative TRUE file(s) blob created relative repository's working dir. Default TRUE.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/blob_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create blob from file on disk — blob_create","text":"list S3 class git_blob objects","code":""},{"path":"https://docs.ropensci.org/git2r/reference/blob_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create blob from file on disk — blob_create","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create blobs from files relative to workdir writeLines(\"Hello, world!\", file.path(path, \"example-1.txt\")) writeLines(\"test content\", file.path(path, \"example-2.txt\")) blob_list_1 <- blob_create(repo, c(\"example-1.txt\",                                    \"example-2.txt\"))  ## Create blobs from files not relative to workdir temp_file_1 <- tempfile() temp_file_2 <- tempfile() writeLines(\"Hello, world!\", temp_file_1) writeLines(\"test content\", temp_file_2) blob_list_2 <- blob_create(repo, c(temp_file_1, temp_file_2),                            relative = FALSE) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/branch_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a branch — branch_create","title":"Create a branch — branch_create","text":"Create branch","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branch_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a branch — branch_create","text":"","code":"branch_create(commit = last_commit(), name = NULL, force = FALSE)"},{"path":"https://docs.ropensci.org/git2r/reference/branch_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a branch — branch_create","text":"commit Commit branch point. default use last_commit() function determine commit branch point. name Name branch force Overwrite existing branch. Default = FALSE","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branch_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a branch — branch_create","text":"invisible git_branch object","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branch_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a branch — branch_create","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user and commit a file config(repo, user.name = \"Alice\", user.email = \"alice@example.org\") lines <- \"Hello world!\" writeLines(lines, file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit_1 <- commit(repo, \"First commit message\")  ## Create a branch branch_1 <- branch_create(commit_1, name = \"test-branch\")  ## Add one more commit lines <- c(\"Hello world!\", \"HELLO WORLD!\") writeLines(lines, file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit_2 <- commit(repo, \"Another commit message\")  ## Create a branch with the same name should fail try(branch_create(commit_2, name = \"test-branch\"), TRUE)  ## Force it branch_2 <- branch_create(commit_2, name = \"test-branch\", force = TRUE) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/branch_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a branch — branch_delete","title":"Delete a branch — branch_delete","text":"Delete branch","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branch_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a branch — branch_delete","text":"","code":"branch_delete(branch = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/branch_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a branch — branch_delete","text":"branch branch","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branch_delete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete a branch — branch_delete","text":"invisible NULL","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branch_delete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete a branch — branch_delete","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user and commit a file config(repo, user.name = \"Alice\", user.email = \"alice@example.org\") writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit_1 <- commit(repo, \"First commit message\")  ## Create a 'dev' branch dev <- branch_create(commit_1, name = \"dev\") branches(repo)  ## Delete 'dev' branch branch_delete(dev) branches(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/branch_get_upstream.html","id":null,"dir":"Reference","previous_headings":"","what":"Get remote tracking branch — branch_get_upstream","title":"Get remote tracking branch — branch_get_upstream","text":"Get remote tracking branch, given local branch.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branch_get_upstream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get remote tracking branch — branch_get_upstream","text":"","code":"branch_get_upstream(branch = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/branch_get_upstream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get remote tracking branch — branch_get_upstream","text":"branch branch","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branch_get_upstream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get remote tracking branch — branch_get_upstream","text":"git_branch object NULL remote tracking     branch.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branch_get_upstream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get remote tracking branch — branch_get_upstream","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize two temporary repositories path_bare <- tempfile(pattern=\"git2r-\") path_repo <- tempfile(pattern=\"git2r-\") dir.create(path_bare) dir.create(path_repo) repo_bare <- init(path_bare, bare = TRUE) repo <- clone(path_bare, path_repo)  ## Config user and commit a file config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Write to a file and commit lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path_repo, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Push commits from repository to bare repository ## Adds an upstream tracking branch to branch 'master' push(repo, \"origin\", \"refs/heads/master\")  ## Get remote tracking branch branch_get_upstream(repository_head(repo)) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/branch_remote_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Remote name of a branch — branch_remote_name","title":"Remote name of a branch — branch_remote_name","text":"name remote remote tracking branch belongs ","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branch_remote_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote name of a branch — branch_remote_name","text":"","code":"branch_remote_name(branch = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/branch_remote_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote name of a branch — branch_remote_name","text":"branch branch","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branch_remote_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remote name of a branch — branch_remote_name","text":"character string remote name","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branch_remote_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remote name of a branch — branch_remote_name","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize two temporary repositories path_bare <- tempfile(pattern=\"git2r-\") path_repo <- tempfile(pattern=\"git2r-\") dir.create(path_bare) dir.create(path_repo) repo_bare <- init(path_bare, bare = TRUE) repo <- clone(path_bare, path_repo)  ## Config user and commit a file config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Write to a file and commit lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path_repo, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Push commits from repository to bare repository ## Adds an upstream tracking branch to branch 'master' push(repo, \"origin\", \"refs/heads/master\")  ## Get remote name branch_remote_name(branches(repo)[[2]]) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/branch_remote_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Remote url of a branch — branch_remote_url","title":"Remote url of a branch — branch_remote_url","text":"Remote url branch","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branch_remote_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote url of a branch — branch_remote_url","text":"","code":"branch_remote_url(branch = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/branch_remote_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote url of a branch — branch_remote_url","text":"branch branch","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branch_remote_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remote url of a branch — branch_remote_url","text":"character string remote url","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branch_remote_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remote url of a branch — branch_remote_url","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize two temporary repositories path_bare <- tempfile(pattern=\"git2r-\") path_repo <- tempfile(pattern=\"git2r-\") dir.create(path_bare) dir.create(path_repo) repo_bare <- init(path_bare, bare = TRUE) repo <- clone(path_bare, path_repo)  ## Config user and commit a file config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Write to a file and commit lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path_repo, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Push commits from repository to bare repository ## Adds an upstream tracking branch to branch 'master' push(repo, \"origin\", \"refs/heads/master\")  ## Get remote url of tracking branch to branch 'master' branch_remote_url(branch_get_upstream(repository_head(repo))) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/branch_rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename a branch — branch_rename","title":"Rename a branch — branch_rename","text":"Rename branch","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branch_rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename a branch — branch_rename","text":"","code":"branch_rename(branch = NULL, name = NULL, force = FALSE)"},{"path":"https://docs.ropensci.org/git2r/reference/branch_rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename a branch — branch_rename","text":"branch Branch rename name new name branch force Overwrite existing branch. Default FALSE","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branch_rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename a branch — branch_rename","text":"invisible renamed git_branch object","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branch_rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename a branch — branch_rename","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Config user and commit a file config(repo, user.name = \"Alice\", user.email = \"alice@example.org\") lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Rename 'master' branch to 'dev' branches(repo) branch_rename(repository_head(repo), \"dev\") branches(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/branch_set_upstream.html","id":null,"dir":"Reference","previous_headings":"","what":"Set remote tracking branch — branch_set_upstream","title":"Set remote tracking branch — branch_set_upstream","text":"Set upstream configuration given local branch","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branch_set_upstream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set remote tracking branch — branch_set_upstream","text":"","code":"branch_set_upstream(branch = NULL, name)"},{"path":"https://docs.ropensci.org/git2r/reference/branch_set_upstream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set remote tracking branch — branch_set_upstream","text":"branch branch configure name remote-tracking local branch set upstream. Pass NULL unset.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branch_set_upstream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set remote tracking branch — branch_set_upstream","text":"invisible NULL","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branch_set_upstream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set remote tracking branch — branch_set_upstream","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize two temporary repositories path_bare <- tempfile(pattern=\"git2r-\") path_repo <- tempfile(pattern=\"git2r-\") dir.create(path_bare) dir.create(path_repo) repo_bare <- init(path_bare, bare = TRUE) repo <- clone(path_bare, path_repo)  ## Config user and commit a file config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Write to a file and commit lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path_repo, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Push commits from repository to bare repository ## Adds an upstream tracking branch to branch 'master' push(repo, \"origin\", \"refs/heads/master\")  ## Unset remote remote tracking branch branch_get_upstream(repository_head(repo)) branch_set_upstream(repository_head(repo), NULL) branch_get_upstream(repository_head(repo))  ## Set remote tracking branch branch_set_upstream(repository_head(repo), \"origin/master\") branch_get_upstream(repository_head(repo)) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/branch_target.html","id":null,"dir":"Reference","previous_headings":"","what":"Get target (sha) pointed to by a branch — branch_target","title":"Get target (sha) pointed to by a branch — branch_target","text":"Get target (sha) pointed branch","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branch_target.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get target (sha) pointed to by a branch — branch_target","text":"","code":"branch_target(branch = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/branch_target.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get target (sha) pointed to by a branch — branch_target","text":"branch branch","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branch_target.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get target (sha) pointed to by a branch — branch_target","text":"sha NA direct reference","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branch_target.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get target (sha) pointed to by a branch — branch_target","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Config user and commit a file config(repo, user.name = \"Alice\", user.email = \"alice@example.org\") lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Get target (sha) pointed to by 'master' branch branch_target(repository_head(repo)) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/branches.html","id":null,"dir":"Reference","previous_headings":"","what":"Branches — branches","title":"Branches — branches","text":"List branches repository","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Branches — branches","text":"","code":"branches(repo = \".\", flags = c(\"all\", \"local\", \"remote\"))"},{"path":"https://docs.ropensci.org/git2r/reference/branches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Branches — branches","text":"repo path repository git_repository object. Default '.' flags Filtering flags branch listing. Valid values '', 'local' 'remote'","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Branches — branches","text":"list branches repository","code":""},{"path":"https://docs.ropensci.org/git2r/reference/branches.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Branches — branches","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize repositories path_bare <- tempfile(pattern=\"git2r-\") path_repo <- tempfile(pattern=\"git2r-\") dir.create(path_bare) dir.create(path_repo) repo_bare <- init(path_bare, bare = TRUE) repo <- clone(path_bare, path_repo)  ## Config first user and commit a file config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Write to a file and commit lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path_repo, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Push commits from repository to bare repository ## Adds an upstream tracking branch to branch 'master' push(repo, \"origin\", \"refs/heads/master\")  ## List branches branches(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/bundle_r_package.html","id":null,"dir":"Reference","previous_headings":"","what":"Bundle bare repo of package — bundle_r_package","title":"Bundle bare repo of package — bundle_r_package","text":"Clone package git repository bare repository pkg/inst/pkg.git","code":""},{"path":"https://docs.ropensci.org/git2r/reference/bundle_r_package.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bundle bare repo of package — bundle_r_package","text":"","code":"bundle_r_package(repo = \".\")"},{"path":"https://docs.ropensci.org/git2r/reference/bundle_r_package.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bundle bare repo of package — bundle_r_package","text":"repo path repository git_repository object. Default '.'","code":""},{"path":"https://docs.ropensci.org/git2r/reference/bundle_r_package.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bundle bare repo of package — bundle_r_package","text":"Invisible bundled git_repository object","code":""},{"path":"https://docs.ropensci.org/git2r/reference/bundle_r_package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bundle bare repo of package — bundle_r_package","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize repository path <- tempfile() dir.create(path) path <- file.path(path, \"git2r\") repo <- clone(\"https://github.com/ropensci/git2r.git\", path)  ## Bundle bare repository in package bundle_r_package(repo)  ## Build and install bundled package wd <- setwd(dirname(path)) system(sprintf(\"R CMD build %s\", path)) pkg <- list.files(\".\", pattern = \"[.]tar[.]gz$\") system(sprintf(\"R CMD INSTALL %s\", pkg)) setwd(wd)  ## Reload package detach(\"package:git2r\", unload = TRUE) library(git2r)  ## Summarize last five commits of bundled repo repo <- repository(system.file(\"git2r.git\", package = \"git2r\")) invisible(lapply(commits(repo, n = 5), summary))  ## Plot content of bundled repo plot(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/checkout.html","id":null,"dir":"Reference","previous_headings":"","what":"Checkout — checkout","title":"Checkout — checkout","text":"Update files index working tree match content tree pointed treeish object (commit, tag tree). default checkout strategy (force = FALSE) make modifications lose changes. Use force = TRUE force working directory look like index.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/checkout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checkout — checkout","text":"","code":"checkout(   object = NULL,   branch = NULL,   create = FALSE,   force = FALSE,   path = NULL,   ... )"},{"path":"https://docs.ropensci.org/git2r/reference/checkout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checkout — checkout","text":"object path repository, git_repository object, git_commit object, git_tag object, git_tree object. branch name branch check . used object path repository git_repository object. create create branch exist. used object path repository git_repository object. force TRUE, make working directory match target. throw away local changes. Default FALSE. path Limit checkout operation certain paths. argument used branch NULL. Default NULL. ... Additional arguments. used.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/checkout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checkout — checkout","text":"invisible NULL","code":""},{"path":"https://docs.ropensci.org/git2r/reference/checkout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checkout — checkout","text":"","code":"if (FALSE) { # \\dontrun{ ## Create directories and initialize repositories path_bare <- tempfile(pattern=\"git2r-\") path_repo_1 <- tempfile(pattern=\"git2r-\") path_repo_2 <- tempfile(pattern=\"git2r-\") dir.create(path_bare) dir.create(path_repo_1) dir.create(path_repo_2) repo_bare <- init(path_bare, bare = TRUE)  ## Clone to repo 1 and config user repo_1 <- clone(path_bare, path_repo_1) config(repo_1, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Add changes to repo 1 and push to bare lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path_repo_1, \"test.txt\")) add(repo_1, \"test.txt\") commit(repo_1, \"First commit message\") push(repo_1, \"origin\", \"refs/heads/master\")  ## Create and checkout 'dev' branch in repo 1 checkout(repo_1, \"dev\", create = TRUE)  ## Add changes to 'dev' branch in repo 1 and push to bare lines <- c(   \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\",   \"eiusmod tempor incididunt ut labore et dolore magna aliqua.\") writeLines(lines, file.path(path_repo_1, \"test.txt\")) add(repo_1, \"test.txt\") commit(repo_1, \"Second commit message\") push(repo_1, \"origin\", \"refs/heads/dev\")  ## Clone to repo 2 repo_2 <- clone(path_bare, path_repo_2) config(repo_2, user.name = \"Bob\", user.email = \"bob@example.org\")  ## Read content of 'test.txt' readLines(file.path(path_repo_2, \"test.txt\"))  ## Checkout dev branch checkout(repo_2, \"dev\")  ## Read content of 'test.txt' readLines(file.path(path_repo_2, \"test.txt\"))  ## Edit \"test.txt\" in repo_2 writeLines(\"Hello world!\", con = file.path(path_repo_2, \"test.txt\"))  ## Check status status(repo_2)  ## Checkout \"test.txt\" checkout(repo_2, path = \"test.txt\")  ## Check status status(repo_2) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/clone.html","id":null,"dir":"Reference","previous_headings":"","what":"Clone a remote repository — clone","title":"Clone a remote repository — clone","text":"Clone remote repository","code":""},{"path":"https://docs.ropensci.org/git2r/reference/clone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clone a remote repository — clone","text":"","code":"clone(   url = NULL,   local_path = NULL,   bare = FALSE,   branch = NULL,   checkout = TRUE,   credentials = NULL,   progress = TRUE )"},{"path":"https://docs.ropensci.org/git2r/reference/clone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clone a remote repository — clone","text":"url remote repository clone local_path Local directory clone . bare Create bare repository. Default FALSE. branch name branch checkout. Default NULL means use remote's default branch. checkout Checkout HEAD clone complete. Default TRUE. credentials credentials remote repository access. Default NULL. use query ssh-agent ssh key credentials, let parameter NULL (default). progress Show progress. Default TRUE.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/clone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clone a remote repository — clone","text":"git_repository object.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/reference/clone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clone a remote repository — clone","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize repository path_repo_1 <- tempfile(pattern=\"git2r-\") path_repo_2 <- tempfile(pattern=\"git2r-\") dir.create(path_repo_1) dir.create(path_repo_2) repo_1 <- init(path_repo_1)  ## Config user and commit a file config(repo_1, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Write to a file and commit writeLines(     \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\",     file.path(path_repo_1, \"example.txt\")) add(repo_1, \"example.txt\") commit(repo_1, \"First commit message\")  ## Change file and commit lines <- c(   \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\",   \"eiusmod tempor incididunt ut labore et dolore magna aliqua.\") writeLines(lines, file.path(path_repo_1, \"example.txt\")) add(repo_1, \"example.txt\") commit(repo_1, \"Second commit message\")  ## Change file again and commit. lines <- c(   \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\",   \"eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\",   \"minim veniam, quis nostrud exercitation ullamco laboris nisi ut\") writeLines(lines, file.path(path_repo_1, \"example.txt\")) add(repo_1, \"example.txt\") commit(repo_1, \"Third commit message\")  ## Clone to second repository repo_2 <- clone(path_repo_1, path_repo_2)  ## List commits in repositories commits(repo_1) commits(repo_2) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/commit.html","id":null,"dir":"Reference","previous_headings":"","what":"Commit — commit","title":"Commit — commit","text":"Commit","code":""},{"path":"https://docs.ropensci.org/git2r/reference/commit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Commit — commit","text":"","code":"commit(   repo = \".\",   message = NULL,   all = FALSE,   session = FALSE,   author = NULL,   committer = NULL )"},{"path":"https://docs.ropensci.org/git2r/reference/commit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Commit — commit","text":"repo path repository git_repository object. Default '.' message commit message. Stage modified deleted files. Files added Git affected. session Add sessionInfo commit message. Default FALSE. author Signature author author time commit. committer Signature committer commit time commit.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/commit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Commit — commit","text":"list class git_commit entries: sha 40 character hexadecimal string SHA-1 author author signature committer committer signature summary short \"summary\" git commit message, comprising first     paragraph message whitespace trimmed squashed. message message commit repo git_repository object contains commit","code":""},{"path":"https://docs.ropensci.org/git2r/reference/commit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Commit — commit","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Config user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Write to a file and commit lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\") } # }"},{"path":"https://docs.ropensci.org/git2r/reference/commits.html","id":null,"dir":"Reference","previous_headings":"","what":"Commits — commits","title":"Commits — commits","text":"Commits","code":""},{"path":"https://docs.ropensci.org/git2r/reference/commits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Commits — commits","text":"","code":"commits(   repo = \".\",   topological = TRUE,   time = TRUE,   reverse = FALSE,   n = NULL,   ref = NULL,   path = NULL )"},{"path":"https://docs.ropensci.org/git2r/reference/commits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Commits — commits","text":"repo path repository git_repository object. Default '.' topological Sort commits topological order (parents children); can combined time sorting. Default TRUE. time Sort commits commit time; Can combined topological sorting. Default TRUE. reverse Sort commits reverse order; can combined topological /time sorting. Default FALSE. n upper limit number commits output. default NULL unlimited number commits. ref name reference list commits e.g. tag branch. default NULL current branch. path path file. NULL, commits modifying file returned. Note modifying commits occurred file given present name returned; , output git log ---follow reproduced.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/commits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Commits — commits","text":"list commits repository","code":""},{"path":"https://docs.ropensci.org/git2r/reference/commits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Commits — commits","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Config user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Write to a file and commit lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Change file and commit lines <- c(   \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\",   \"eiusmod tempor incididunt ut labore et dolore magna aliqua.\") writeLines(lines, file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"Second commit message\")  ## Create a tag tag(repo, \"Tagname\", \"Tag message\")  ## Change file again and commit lines <- c(   \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\",   \"eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\",   \"minim veniam, quis nostrud exercitation ullamco laboris nisi ut\") writeLines(lines, file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"Third commit message\")  ## Create a new file containing R code, and commit. writeLines(c(\"x <- seq(1,100)\",              \"print(mean(x))\"),            file.path(path, \"mean.R\")) add(repo, \"mean.R\") commit(repo, \"Fourth commit message\")  ## List the commits in the repository commits(repo)  ## List the commits starting from the tag commits(repo, ref = \"Tagname\")  ## List the commits modifying example.txt and mean.R. commits(repo, path = \"example.txt\") commits(repo, path = \"mean.R\")  ## Create and checkout 'dev' branch in the repo checkout(repo, \"dev\", create = TRUE)  ## Add changes to the 'dev' branch lines <- c(   \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\",   \"eiusmod tempor incididunt ut labore et dolore magna aliqua.\") writeLines(lines, file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"Commit message in dev branch\")  ## Checkout the 'master' branch again and list the commits ## starting from the 'dev' branch. checkout(repo, \"master\") commits(repo, ref = \"dev\") } # }"},{"path":"https://docs.ropensci.org/git2r/reference/config.html","id":null,"dir":"Reference","previous_headings":"","what":"Config — config","title":"Config — config","text":"Config file management. display configuration variables, call method config without user.name, user.email ... options.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Config — config","text":"","code":"config(repo = NULL, global = FALSE, user.name, user.email, ...)"},{"path":"https://docs.ropensci.org/git2r/reference/config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Config — config","text":"repo repository. Default NULL. global Write option(s) global configuration file. Default FALSE. user.name user name. Use NULL delete entry user.email e-mail address. Use NULL delete entry ... Additional options write delete configuration.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Config — config","text":"S3 class git_config. writing options, configuration returned invisible.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Config — config","text":"two ways git2r can find local repository writing local options (1) Use repo argument. (2) repo argument NULL current working directory inside local repository, git2r uses repository.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Config — config","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern = \"git2r-\") dir.create(path) repo <- init(path)  ## Set user name and email. config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Display configuration config(repo)  ## Delete user email. config(repo, user.email = NULL)  ## Display configuration config(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/content.html","id":null,"dir":"Reference","previous_headings":"","what":"Content of blob — content","title":"Content of blob — content","text":"Content blob","code":""},{"path":"https://docs.ropensci.org/git2r/reference/content.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Content of blob — content","text":"","code":"content(blob = NULL, split = TRUE, raw = FALSE)"},{"path":"https://docs.ropensci.org/git2r/reference/content.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Content of blob — content","text":"blob blob object. split Split blob content text lines. Default TRUE. raw TRUE, get content blob raw vector, else character vector. Default FALSE.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/content.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Content of blob — content","text":"content blob. NA_character_ blob     binary raw FALSE.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/content.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Content of blob — content","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user and commit a file config(repo, user.name = \"Alice\", user.email = \"alice@example.org\") writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Display content of blob. content(tree(commits(repo)[[1]])[\"example.txt\"]) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/contributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Contributions — contributions","title":"Contributions — contributions","text":"See contributions Git repo","code":""},{"path":"https://docs.ropensci.org/git2r/reference/contributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contributions — contributions","text":"","code":"contributions(   repo = \".\",   breaks = c(\"month\", \"year\", \"quarter\", \"week\", \"day\"),   by = c(\"commits\", \"author\") )"},{"path":"https://docs.ropensci.org/git2r/reference/contributions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Contributions — contributions","text":"repo path repository git_repository object. Default '.' breaks Default month. Change year, quarter, week day necessary. Contributions \"commits\" \"author\". Default \"commits\".","code":""},{"path":"https://docs.ropensci.org/git2r/reference/contributions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Contributions — contributions","text":"data.frame contributions.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/contributions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Contributions — contributions","text":"","code":"if (FALSE) { # \\dontrun{ ## Create directories and initialize repositories path_bare <- tempfile(pattern=\"git2r-\") path_repo_1 <- tempfile(pattern=\"git2r-\") path_repo_2 <- tempfile(pattern=\"git2r-\") dir.create(path_bare) dir.create(path_repo_1) dir.create(path_repo_2) repo_bare <- init(path_bare, bare = TRUE)  ## Clone to repo 1 and config user repo_1 <- clone(path_bare, path_repo_1) config(repo_1, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Add changes to repo 1 and push to bare lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path_repo_1, \"test.txt\")) add(repo_1, \"test.txt\") commit(repo_1, \"First commit message\")  ## Add more changes to repo 1 lines <- c(   \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\",   \"eiusmod tempor incididunt ut labore et dolore magna aliqua.\") writeLines(lines, file.path(path_repo_1, \"test.txt\")) add(repo_1, \"test.txt\") commit(repo_1, \"Second commit message\")  ## Push to bare push(repo_1, \"origin\", \"refs/heads/master\")  ## Clone to repo 2 repo_2 <- clone(path_bare, path_repo_2) config(repo_2, user.name = \"Bob\", user.email = \"bob@example.org\")  ## Add changes to repo 2 lines <- c(   \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\",   \"eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\",   \"minim veniam, quis nostrud exercitation ullamco laboris nisi ut\") writeLines(lines, file.path(path_repo_2, \"test.txt\")) add(repo_2, \"test.txt\") commit(repo_2, \"Third commit message\")  ## Push to bare push(repo_2, \"origin\", \"refs/heads/master\")  ## Pull changes to repo 1 pull(repo_1)  ## View contributions by day contributions(repo_1)  ## View contributions by author and day contributions(repo_1, by = \"author\") } # }"},{"path":"https://docs.ropensci.org/git2r/reference/cred_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new environmental credential object — cred_env","title":"Create a new environmental credential object — cred_env","text":"Environmental variables can written file .Renviron. file read R startup, see Startup.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/cred_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new environmental credential object — cred_env","text":"","code":"cred_env(username = NULL, password = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/cred_env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new environmental credential object — cred_env","text":"username name environmental variable holds username authentication. password name environmental variable holds password authentication.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/cred_env.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new environmental credential object — cred_env","text":"list class cred_env entries: username name environmental variable holds     username authentication. password name environmental variable holds     password authentication.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/reference/cred_env.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new environmental credential object — cred_env","text":"","code":"if (FALSE) { # \\dontrun{ ## Create an environmental credential object for the username and ## password. cred <- cred_env(\"NAME_OF_ENV_VARIABLE_WITH_USERNAME\",                  \"NAME_OF_ENV_VARIABLE_WITH_PASSWORD\") repo <- repository(\"git2r\") push(repo, credentials = cred) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/cred_ssh_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new passphrase-protected ssh key credential object — cred_ssh_key","title":"Create a new passphrase-protected ssh key credential object — cred_ssh_key","text":"Create new passphrase-protected ssh key credential object","code":""},{"path":"https://docs.ropensci.org/git2r/reference/cred_ssh_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new passphrase-protected ssh key credential object — cred_ssh_key","text":"","code":"cred_ssh_key(   publickey = ssh_path(\"id_rsa.pub\"),   privatekey = ssh_path(\"id_rsa\"),   passphrase = character(0) )"},{"path":"https://docs.ropensci.org/git2r/reference/cred_ssh_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new passphrase-protected ssh key credential object — cred_ssh_key","text":"publickey path public key credential. Default ssh_path(\"id_rsa.pub\") privatekey path private key credential. Default ssh_path(\"id_rsa\") passphrase passphrase credential. Default character(0). getPass installed private key passphrase protected getPass::getPass() called allow interactive obfuscated interactive input passphrase.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/cred_ssh_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new passphrase-protected ssh key credential object — cred_ssh_key","text":"list class cred_ssh_key entries: publickey path public key credential privatekey path private key credential passphrase passphrase credential","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/reference/cred_ssh_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new passphrase-protected ssh key credential object — cred_ssh_key","text":"","code":"if (FALSE) { # \\dontrun{ ## Create a ssh key credential object. It can optionally be ## passphrase-protected cred <- cred_ssh_key(ssh_path(\"id_rsa.pub\"), ssh_path(\"id_rsa\")) repo <- repository(\"git2r\") push(repo, credentials = cred) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/cred_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new personal access token credential object — cred_token","title":"Create a new personal access token credential object — cred_token","text":"personal access token stored envrionmental variable. Environmental variables can written file .Renviron. file read R startup, see Startup. GitHub, personal access tokens function like ordinary OAuth access tokens. can used instead password Git HTTPS, see “Creating personal access token” article GitHub Docs.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/cred_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new personal access token credential object — cred_token","text":"","code":"cred_token(token = \"GITHUB_PAT\")"},{"path":"https://docs.ropensci.org/git2r/reference/cred_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new personal access token credential object — cred_token","text":"token name environmental variable holds personal access token authentication. Default GITHUB_PAT.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/cred_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new personal access token credential object — cred_token","text":"list class cred_token entry: token name environmental variable holds     personal access token authentication.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/reference/cred_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new personal access token credential object — cred_token","text":"","code":"if (FALSE) { # \\dontrun{ ## Create a personal access token credential object. ## This example assumes that the token is stored in ## the 'GITHUB_PAT' environmental variable. repo <- repository(\"git2r\") cred <- cred_token() push(repo, credentials = cred) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/cred_user_pass.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new plain-text username and password credential object — cred_user_pass","title":"Create a new plain-text username and password credential object — cred_user_pass","text":"Create new plain-text username password credential object","code":""},{"path":"https://docs.ropensci.org/git2r/reference/cred_user_pass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new plain-text username and password credential object — cred_user_pass","text":"","code":"cred_user_pass(username = NULL, password = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/cred_user_pass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new plain-text username and password credential object — cred_user_pass","text":"username username credential password password credential. getPass installed input username, getPass::getPass() called allow interactive obfuscated interactive input password.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/cred_user_pass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new plain-text username and password credential object — cred_user_pass","text":"list class cred_user_pass entries: username username credential password password credential","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/reference/cred_user_pass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new plain-text username and password credential object — cred_user_pass","text":"","code":"if (FALSE) { # \\dontrun{ ## Create a plain-text username and password credential object cred_user_pass(\"Random Developer\", \"SecretPassword\") } # }"},{"path":"https://docs.ropensci.org/git2r/reference/default_signature.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the signature — default_signature","title":"Get the signature — default_signature","text":"Get signature according repository's configuration","code":""},{"path":"https://docs.ropensci.org/git2r/reference/default_signature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the signature — default_signature","text":"","code":"default_signature(repo = \".\")"},{"path":"https://docs.ropensci.org/git2r/reference/default_signature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the signature — default_signature","text":"repo path repository git_repository object. Default '.'","code":""},{"path":"https://docs.ropensci.org/git2r/reference/default_signature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the signature — default_signature","text":"git_signature object entries:","code":""},{"path":"https://docs.ropensci.org/git2r/reference/default_signature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the signature — default_signature","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Get the default signature default_signature(repo)  ## Change user config(repo, user.name = \"Bob\", user.email = \"bob@example.org\")  ## Get the default signature default_signature(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/descendant_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Descendant — descendant_of","title":"Descendant — descendant_of","text":"Determine commit descendant another commit","code":""},{"path":"https://docs.ropensci.org/git2r/reference/descendant_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Descendant — descendant_of","text":"","code":"descendant_of(commit = NULL, ancestor = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/descendant_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Descendant — descendant_of","text":"commit git_commit object. Can also tag branch, case commit target tag branch. ancestor git_commit object check ancestor commit. Can also tag branch, case commit target tag branch.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/descendant_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Descendant — descendant_of","text":"TRUE commit descendant ancestor,     else FALSE","code":""},{"path":"https://docs.ropensci.org/git2r/reference/descendant_of.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Descendant — descendant_of","text":"","code":"if (FALSE) { # \\dontrun{ ## Create a directory in tempdir path <- tempfile(pattern=\"git2r-\") dir.create(path)  ## Initialize a repository repo <- init(path) config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create a file, add and commit lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path, \"test.txt\")) add(repo, \"test.txt\") commit_1 <- commit(repo, \"Commit message 1\") tag_1 <- tag(repo, \"Tagname1\", \"Tag message 1\")  # Change file and commit lines <- c(   \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\",   \"eiusmod tempor incididunt ut labore et dolore magna aliqua.\") writeLines(lines, file.path(path, \"test.txt\")) add(repo, \"test.txt\") commit_2 <- commit(repo, \"Commit message 2\") tag_2 <- tag(repo, \"Tagname2\", \"Tag message 2\")  descendant_of(commit_1, commit_2) descendant_of(commit_2, commit_1) descendant_of(tag_1, tag_2) descendant_of(tag_2, tag_1) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/diff-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Changes between commits, trees, working tree, etc. — diff.git_repository","title":"Changes between commits, trees, working tree, etc. — diff.git_repository","text":"Changes commits, trees, working tree, etc.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/diff-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Changes between commits, trees, working tree, etc. — diff.git_repository","text":"","code":"# S3 method for class 'git_repository' diff(   x,   index = FALSE,   as_char = FALSE,   filename = NULL,   context_lines = 3,   interhunk_lines = 0,   old_prefix = \"a\",   new_prefix = \"b\",   id_abbrev = NULL,   path = NULL,   max_size = NULL,   ... )  # S3 method for class 'git_tree' diff(   x,   new_tree = NULL,   index = FALSE,   as_char = FALSE,   filename = NULL,   context_lines = 3,   interhunk_lines = 0,   old_prefix = \"a\",   new_prefix = \"b\",   id_abbrev = NULL,   path = NULL,   max_size = NULL,   ... )"},{"path":"https://docs.ropensci.org/git2r/reference/diff-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Changes between commits, trees, working tree, etc. — diff.git_repository","text":"x git_repository object old git_tree object compare . index object equals git_repository Whether compare index HEAD. FALSE (default),     working tree compared index. object equals git_tree Whether use working directory (default), index     (set TRUE) comparison object. as_char logical: result converted character string?. Default FALSE. filename as_char TRUE, diff can written file name filename (file overwritten exists). Default NULL. context_lines number unchanged lines define boundary hunk (display ). Defaults 3. interhunk_lines maximum number unchanged lines hunk boundaries hunks merged one. Defaults 0. old_prefix virtual \"directory\" prefix old file names hunk headers. Default \"\". new_prefix virtual \"directory\" prefix new file names hunk headers. Defaults \"b\". id_abbrev abbreviation length use formatting object ids. Defaults value 'core.abbrev' config, 7 NULL. path character vector paths / fnmatch patterns constrain diff. Default NULL include paths. max_size size (bytes) blob marked binary automatically; pass negative value disable. Defaults 512MB max_size NULL. ... used. new_tree new git_tree object compare, NULL.  NULL, use working directory index (see index argument).","code":""},{"path":"https://docs.ropensci.org/git2r/reference/diff-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Changes between commits, trees, working tree, etc. — diff.git_repository","text":"git_diff object as_char FALSE. as_char     TRUE filename NULL, character string, else NULL.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/diff-methods.html","id":"line-endings","dir":"Reference","previous_headings":"","what":"Line endings","title":"Changes between commits, trees, working tree, etc. — diff.git_repository","text":"Different operating systems handle line endings differently. Windows uses carriage-return character linefeed character represent newline file. Linux macOS use linefeed character newline file. avoid problems diffs, can configure Git properly handle line endings using core.autocrlf setting Git config file, see Git documentation (https://git-scm.com/).","code":""},{"path":"https://docs.ropensci.org/git2r/reference/diff-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Changes between commits, trees, working tree, etc. — diff.git_repository","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Config user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create a file, add, commit writeLines(\"Hello world!\", file.path(path, \"test.txt\")) add(repo, \"test.txt\") commit(repo, \"Commit message\")  ## Change the file writeLines(c(\"Hello again!\", \"Here is a second line\", \"And a third\"),            file.path(path, \"test.txt\"))  ## diff between index and workdir diff_1 <- diff(repo) summary(diff_1) cat(diff(repo, as_char=TRUE))  ## Diff between index and HEAD is empty diff_2 <- diff(repo, index=TRUE) summary(diff_2) cat(diff(repo, index=TRUE, as_char=TRUE))  ## Diff between tree and working dir, same as diff_1 diff_3 <- diff(tree(commits(repo)[[1]])) summary(diff_3) cat(diff(tree(commits(repo)[[1]]), as_char=TRUE))  ## Add changes, diff between index and HEAD is the same as diff_1 add(repo, \"test.txt\") diff_4 <- diff(repo, index=TRUE) summary(diff_4) cat(diff(repo, index=TRUE, as_char=TRUE))  ## Diff between tree and index diff_5 <- diff(tree(commits(repo)[[1]]), index=TRUE) summary(diff_5) cat(diff(tree(commits(repo)[[1]]), index=TRUE, as_char=TRUE))  ## Diff between two trees commit(repo, \"Second commit\") tree_1 <- tree(commits(repo)[[2]]) tree_2 <- tree(commits(repo)[[1]]) diff_6 <- diff(tree_1, tree_2) summary(diff_6) cat(diff(tree_1, tree_2, as_char=TRUE))  ## Binary files set.seed(42) writeBin(as.raw((sample(0:255, 1000, replace=TRUE))),          con=file.path(path, \"test.bin\")) add(repo, \"test.bin\") diff_7 <- diff(repo, index=TRUE) summary(diff_7) cat(diff(repo, index=TRUE, as_char=TRUE)) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/discover_repository.html","id":null,"dir":"Reference","previous_headings":"","what":"Find path to repository for any file — discover_repository","title":"Find path to repository for any file — discover_repository","text":"Find path repository file","code":""},{"path":"https://docs.ropensci.org/git2r/reference/discover_repository.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find path to repository for any file — discover_repository","text":"","code":"discover_repository(path = \".\", ceiling = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/discover_repository.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find path to repository for any file — discover_repository","text":"path character vector specifying path file folder ceiling default use ceiling argument start lookup path walk across parent directories. ceiling 0, lookup path. ceiling 1, lookup path parent path.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/discover_repository.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find path to repository for any file — discover_repository","text":"Character vector path (terminated file     separator) repository NULL     established.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/discover_repository.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find path to repository for any file — discover_repository","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user and commit a file config(repo, user.name = \"Alice\", user.email = \"alice@example.org\") lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path, \"example-1.txt\")) add(repo, \"example-1.txt\") commit(repo, \"First commit message\")  ## Create a second file. The file is not added for version control ## in the repository. dir.create(file.path(path, \"example\")) file_2 <- file.path(path, \"example/example-2.txt\") writeLines(\"Not under version control\", file_2)  ## Find the path to the repository using the path to the second file discover_repository(file_2)  ## Demonstrate the 'ceiling' argument wd <- workdir(repo) dir.create(file.path(wd, \"temp\"))  ## Lookup repository in 'file.path(wd, \"temp\")'. Should return NULL discover_repository(file.path(wd, \"temp\"), ceiling = 0)  ## Lookup repository in parent to 'file.path(wd, \"temp\")'. ## Should not return NULL discover_repository(file.path(wd, \"temp\"), ceiling = 1) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/fetch.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch new data and update tips — fetch","title":"Fetch new data and update tips — fetch","text":"Fetch new data update tips","code":""},{"path":"https://docs.ropensci.org/git2r/reference/fetch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch new data and update tips — fetch","text":"","code":"fetch(   repo = \".\",   name = NULL,   credentials = NULL,   verbose = TRUE,   refspec = NULL )"},{"path":"https://docs.ropensci.org/git2r/reference/fetch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch new data and update tips — fetch","text":"repo path repository git_repository object. Default '.' name remote's name credentials credentials remote repository access. Default NULL. use query ssh-agent ssh key credentials, let parameter NULL (default). verbose Print information time reference updated locally. Default TRUE. refspec refs fetch local refs update, see examples. Pass NULL use remote.<repository>.fetch variable. Default NULL.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/fetch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch new data and update tips — fetch","text":"invisible list class git_transfer_progress     statistics fetch operation: total_objects Number objects packfile downloaded indexed_objects Received objects hashed received_objects Objects downloaded total_deltas Total number deltas pack indexed_deltas Deltas indexed local_objects Locally-available objects injected order     fix thin pack received_bytes Size packfile received now","code":""},{"path":"https://docs.ropensci.org/git2r/reference/fetch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch new data and update tips — fetch","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize three temporary repositories path_bare <- tempfile(pattern=\"git2r-\") path_repo_1 <- tempfile(pattern=\"git2r-\") path_repo_2 <- tempfile(pattern=\"git2r-\")  dir.create(path_bare) dir.create(path_repo_1) dir.create(path_repo_2)  bare_repo <- init(path_bare, bare = TRUE) repo_1 <- clone(path_bare, path_repo_1) repo_2 <- clone(path_bare, path_repo_2)  config(repo_1, user.name = \"Alice\", user.email = \"alice@example.org\") config(repo_2, user.name = \"Bob\", user.email = \"bob@example.org\")  ## Add changes to repo 1 writeLines(\"Lorem ipsum dolor sit amet\",            con = file.path(path_repo_1, \"example.txt\")) add(repo_1, \"example.txt\") commit(repo_1, \"Commit message\")  ## Push changes from repo 1 to origin (bare_repo) push(repo_1, \"origin\", \"refs/heads/master\")  ## Fetch changes from origin (bare_repo) to repo 2 fetch(repo_2, \"origin\")  ## List updated heads fetch_heads(repo_2)  ## Checking out GitHub pull requests locally path <- tempfile(pattern=\"ghit-\") repo <- clone(\"https://github.com/leeper/ghit\", path) fetch(repo, \"origin\", refspec = \"pull/13/head:refs/heads/BRANCHNAME\") checkout(repo, \"BRANCHNAME\") summary(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/fetch_heads.html","id":null,"dir":"Reference","previous_headings":"","what":"Get updated heads during the last fetch. — fetch_heads","title":"Get updated heads during the last fetch. — fetch_heads","text":"Get updated heads last fetch.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/fetch_heads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get updated heads during the last fetch. — fetch_heads","text":"","code":"fetch_heads(repo = \".\")"},{"path":"https://docs.ropensci.org/git2r/reference/fetch_heads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get updated heads during the last fetch. — fetch_heads","text":"repo path repository git_repository object. Default '.'","code":""},{"path":"https://docs.ropensci.org/git2r/reference/fetch_heads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get updated heads during the last fetch. — fetch_heads","text":"list git_fetch_head entries. NULL     FETCH_HEAD file.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/fetch_heads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get updated heads during the last fetch. — fetch_heads","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize three temporary repositories path_bare <- tempfile(pattern=\"git2r-\") path_repo_1 <- tempfile(pattern=\"git2r-\") path_repo_2 <- tempfile(pattern=\"git2r-\")  dir.create(path_bare) dir.create(path_repo_1) dir.create(path_repo_2)  bare_repo <- init(path_bare, bare = TRUE) repo_1 <- clone(path_bare, path_repo_1) repo_2 <- clone(path_bare, path_repo_2)  config(repo_1, user.name = \"Alice\", user.email = \"alice@example.org\") config(repo_2, user.name = \"Bob\", user.email = \"bob@example.org\")  ## Add changes to repo 1 writeLines(\"Lorem ipsum dolor sit amet\",            con = file.path(path_repo_1, \"example.txt\")) add(repo_1, \"example.txt\") commit(repo_1, \"Commit message\")  ## Push changes from repo 1 to origin (bare_repo) push(repo_1, \"origin\", \"refs/heads/master\")  ## Fetch changes from origin (bare_repo) to repo 2 fetch(repo_2, \"origin\")  ## List updated heads fetch_heads(repo_2) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/git2r.html","id":null,"dir":"Reference","previous_headings":"","what":"git2r: R bindings to the libgit2 library — git2r","title":"git2r: R bindings to the libgit2 library — git2r","text":"git2r: R bindings libgit2 library.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/reference/git2r.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"git2r: R bindings to the libgit2 library — git2r","text":"Maintainer: Stefan Widgren stefan.widgren@gmail.com (ORCID) contributors: Gabor Csardi [contributor] Gregory Jefferis [contributor] Jennifer Bryan [contributor] Jeroen Ooms [contributor] Jim Hester [contributor] John Blischak [contributor] Karthik Ram [contributor] Peter Carbonetto [contributor] Scott Chamberlain [contributor] Thomas Rosendal [contributor]","code":""},{"path":"https://docs.ropensci.org/git2r/reference/git_config_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate the path to configuration files — git_config_files","title":"Locate the path to configuration files — git_config_files","text":"Potential configuration files: system Locate path system configuration file.     '/etc/gitconfig' exist, look     '%PROGRAMFILES%'. xdg Locate path global xdg compatible configuration     file. xdg compatible configuration file usually located     '$HOME/.config/git/config'. method try guess     full path file, file exists. global user global configuration file usually located     '$HOME/.gitconfig'. method try guess full     path file, file exists. local Locate path repository specific configuration file,     file exists.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/git_config_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate the path to configuration files — git_config_files","text":"","code":"git_config_files(repo = \".\")"},{"path":"https://docs.ropensci.org/git2r/reference/git_config_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate the path to configuration files — git_config_files","text":"repo path repository git_repository object. Default '.'","code":""},{"path":"https://docs.ropensci.org/git2r/reference/git_config_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate the path to configuration files — git_config_files","text":"data.frame one row per potential     configuration file NA means found.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/git_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Time — git_time","title":"Time — git_time","text":"class git_time stores time Git object created.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/git_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time — git_time","text":"","code":"# S3 method for class 'git_time' as.character(x, tz = \"GMT\", origin = \"1970-01-01\", usetz = TRUE, ...)  # S3 method for class 'git_time' format(x, tz = \"GMT\", origin = \"1970-01-01\", usetz = TRUE, ...)  # S3 method for class 'git_time' as.POSIXct(x, tz = \"GMT\", origin = \"1970-01-01\", ...)  # S3 method for class 'git_time' print(x, tz = \"GMT\", origin = \"1970-01-01\", usetz = TRUE, ...)"},{"path":"https://docs.ropensci.org/git2r/reference/git_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time — git_time","text":"x R  object converted. tz character string.  time zone specification used     conversion, one required.  System-specific (see     time zones), \"\" current time zone,     \"GMT\" UTC (Universal Time, Coordinated).  Invalid values     commonly treated UTC, platforms warning. origin date-time object, something can coerced     .POSIXct(tz = \"GMT\") object.  Optional since R     4.3.0, equivalent \"1970-01-01\" used. usetz logical.  time zone abbreviation appended     output?  used printing times, reliable     using \"%Z\". ... arguments passed methods.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/git_time.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time — git_time","text":"default use tz = \"GMT\" origin = \"1970-01-01\". use local timezone, set tz = Sys.timezone().","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/reference/git_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time — git_time","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a first user and commit a file config(repo, user.name = \"Alice\", user.email = \"alice@example.org\") writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Create tag tag(repo, \"Tagname\", \"Tag message\")  as.POSIXct(commits(repo)[[1]]$author$when) as.POSIXct(tags(repo)[[1]]$tagger$when) as.POSIXct(tags(repo)[[1]]$tagger$when, tz = Sys.timezone()) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/hash.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the sha from a blob string — hash","title":"Determine the sha from a blob string — hash","text":"blob written object database.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/hash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the sha from a blob string — hash","text":"","code":"hash(data = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/hash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the sha from a blob string — hash","text":"data string vector hash.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/hash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the sha from a blob string — hash","text":"string vector sha string data.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/hash.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine the sha from a blob string — hash","text":"","code":"if (FALSE) { # \\dontrun{ identical(hash(c(\"Hello, world!\\n\",                  \"test content\\n\")),                c(\"af5626b4a114abcb82d63db7c8082c3c4756e51b\",                  \"d670460b4b4aece5915caf5c68d12f560a9fe3e4\")) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/hashfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the sha from a blob in a file — hashfile","title":"Determine the sha from a blob in a file — hashfile","text":"blob written object database.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/hashfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the sha from a blob in a file — hashfile","text":"","code":"hashfile(path = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/hashfile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the sha from a blob in a file — hashfile","text":"path path vector files hash.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/hashfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the sha from a blob in a file — hashfile","text":"vector sha file path.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/hashfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine the sha from a blob in a file — hashfile","text":"","code":"if (FALSE) { # \\dontrun{ ## Create a file. NOTE: The line endings from writeLines gives ## LF (line feed) on Unix/Linux and CRLF (carriage return, line feed) ## on Windows. The example use writeChar to have more control. path <- tempfile() f <- file(path, \"wb\") writeChar(\"Hello, world!\\n\", f, eos = NULL) close(f)  ## Generate hash hashfile(path) identical(hashfile(path), hash(\"Hello, world!\\n\")) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/head.git_repository.html","id":null,"dir":"Reference","previous_headings":"","what":"Get HEAD for a repository — head.git_repository","title":"Get HEAD for a repository — head.git_repository","text":"Get HEAD repository","code":""},{"path":"https://docs.ropensci.org/git2r/reference/head.git_repository.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get HEAD for a repository — head.git_repository","text":"","code":"# S3 method for class 'git_repository' head(x, ...)"},{"path":"https://docs.ropensci.org/git2r/reference/head.git_repository.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get HEAD for a repository — head.git_repository","text":"x repository x check head ... Additional arguments. Unused.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/head.git_repository.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get HEAD for a repository — head.git_repository","text":"NULL unborn branch found. git_branch     detached head. git_commit detached head","code":""},{"path":"https://docs.ropensci.org/git2r/reference/head.git_repository.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get HEAD for a repository — head.git_repository","text":"","code":"if (FALSE) { # \\dontrun{ ## Create and initialize a repository in a temporary directory path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path) config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create a file, add and commit writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"Commit message\")  ## Get HEAD of repository repository_head(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/in_repository.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if a directory is in a git repository — in_repository","title":"Determine if a directory is in a git repository — in_repository","text":"lookup start path walk across parent directories nothing found.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/in_repository.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if a directory is in a git repository — in_repository","text":"","code":"in_repository(path = \".\")"},{"path":"https://docs.ropensci.org/git2r/reference/in_repository.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if a directory is in a git repository — in_repository","text":"path path directory.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/in_repository.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if a directory is in a git repository — in_repository","text":"TRUE directory git repository else FALSE","code":""},{"path":"https://docs.ropensci.org/git2r/reference/in_repository.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if a directory is in a git repository — in_repository","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Check if path is in a git repository in_repository(path)  ## Check if working directory is in a git repository setwd(path) in_repository() } # }"},{"path":"https://docs.ropensci.org/git2r/reference/index_remove_bypath.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove an index entry corresponding to a file on disk — index_remove_bypath","title":"Remove an index entry corresponding to a file on disk — index_remove_bypath","text":"Remove index entry corresponding file disk","code":""},{"path":"https://docs.ropensci.org/git2r/reference/index_remove_bypath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove an index entry corresponding to a file on disk — index_remove_bypath","text":"","code":"index_remove_bypath(repo = \".\", path = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/index_remove_bypath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove an index entry corresponding to a file on disk — index_remove_bypath","text":"repo path repository git_repository object. Default '.' path character vector filenames remove. path must relative repository's working folder. may exist. file currently result merge conflict, file longer marked conflicting. data conflict moved \"resolve undo\" (REUC) section.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/index_remove_bypath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove an index entry corresponding to a file on disk — index_remove_bypath","text":"invisible(NULL)","code":""},{"path":"https://docs.ropensci.org/git2r/reference/index_remove_bypath.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove an index entry corresponding to a file on disk — index_remove_bypath","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create a file writeLines(\"Hello world!\", file.path(path, \"file-to-remove.txt\"))  ## Add file to repository add(repo, \"file-to-remove.txt\")  ## View status of repository status(repo)  ## Remove file index_remove_bypath(repo, \"file-to-remove.txt\")  ## View status of repository status(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/init.html","id":null,"dir":"Reference","previous_headings":"","what":"Init a repository — init","title":"Init a repository — init","text":"Init repository","code":""},{"path":"https://docs.ropensci.org/git2r/reference/init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Init a repository — init","text":"","code":"init(path = \".\", bare = FALSE, branch = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Init a repository — init","text":"path path init git repository bare TRUE, Git repository without working directory created pointed path. FALSE, provided path considered working directory .git directory created. branch Use specified name initial branch newly created repository. branch=NULL, fall back default name.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Init a repository — init","text":"git_repository object","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/reference/init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Init a repository — init","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path) is_bare(repo)  ## Initialize a bare repository path_bare <- tempfile(pattern=\"git2r-\") dir.create(path_bare) repo_bare <- init(path_bare, bare = TRUE) is_bare(repo_bare) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/is_bare.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if repository is bare — is_bare","title":"Check if repository is bare — is_bare","text":"Check repository bare","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_bare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if repository is bare — is_bare","text":"","code":"is_bare(repo = \".\")"},{"path":"https://docs.ropensci.org/git2r/reference/is_bare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if repository is bare — is_bare","text":"repo path repository git_repository object. Default '.'","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_bare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if repository is bare — is_bare","text":"TRUE bare repository, else FALSE","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/reference/is_bare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if repository is bare — is_bare","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path) is_bare(repo)  ## Initialize a bare repository path_bare <- tempfile(pattern=\"git2r-\") dir.create(path_bare) repo_bare <- init(path_bare, bare = TRUE) is_bare(repo_bare) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/is_binary.html","id":null,"dir":"Reference","previous_headings":"","what":"Is blob binary — is_binary","title":"Is blob binary — is_binary","text":"blob binary","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_binary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is blob binary — is_binary","text":"","code":"is_binary(blob = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/is_binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is blob binary — is_binary","text":"blob blob object.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_binary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is blob binary — is_binary","text":"TRUE binary data, FALSE .","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_binary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is blob binary — is_binary","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Commit a text file writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit_1 <- commit(repo, \"First commit message\")  ## Check if binary b_text <- tree(commit_1)[\"example.txt\"] is_binary(b_text)  ## Commit plot file (binary) x <- 1:100 y <- x^2 png(file.path(path, \"plot.png\")) plot(y ~ x, type = \"l\") dev.off() add(repo, \"plot.png\") commit_2 <- commit(repo, \"Second commit message\")  ## Check if binary b_png <- tree(commit_2)[\"plot.png\"] is_binary(b_png) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/is_blob.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if object is S3 class git_blob — is_blob","title":"Check if object is S3 class git_blob — is_blob","text":"Check object S3 class git_blob","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_blob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if object is S3 class git_blob — is_blob","text":"","code":"is_blob(object)"},{"path":"https://docs.ropensci.org/git2r/reference/is_blob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if object is S3 class git_blob — is_blob","text":"object Check object S3 class git_blob","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_blob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if object is S3 class git_blob — is_blob","text":"TRUE object S3 class git_blob, else FALSE","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_blob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if object is S3 class git_blob — is_blob","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Commit a text file writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit_1 <- commit(repo, \"First commit message\") blob_1 <- tree(commit_1)[\"example.txt\"]  ## Check if blob is_blob(commit_1) is_blob(blob_1) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/is_branch.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if object is git_branch — is_branch","title":"Check if object is git_branch — is_branch","text":"Check object git_branch","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_branch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if object is git_branch — is_branch","text":"","code":"is_branch(object)"},{"path":"https://docs.ropensci.org/git2r/reference/is_branch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if object is git_branch — is_branch","text":"object Check object class git_branch","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_branch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if object is git_branch — is_branch","text":"TRUE object class git_branch, else FALSE","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_branch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if object is git_branch — is_branch","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Commit a text file writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  branch <- branches(repo)[[1]]  ## Check if branch is_branch(branch) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/is_commit.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if object is a git_commit object — is_commit","title":"Check if object is a git_commit object — is_commit","text":"Check object git_commit object","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_commit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if object is a git_commit object — is_commit","text":"","code":"is_commit(object)"},{"path":"https://docs.ropensci.org/git2r/reference/is_commit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if object is a git_commit object — is_commit","text":"object Check object git_commit object","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_commit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if object is a git_commit object — is_commit","text":"TRUE object git_commit, else FALSE","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_commit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if object is a git_commit object — is_commit","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Commit a text file writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit_1 <- commit(repo, \"First commit message\")  ## Check if commit is_commit(commit_1) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/is_detached.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if HEAD of repository is detached — is_detached","title":"Check if HEAD of repository is detached — is_detached","text":"Check HEAD repository detached","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_detached.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if HEAD of repository is detached — is_detached","text":"","code":"is_detached(repo = \".\")"},{"path":"https://docs.ropensci.org/git2r/reference/is_detached.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if HEAD of repository is detached — is_detached","text":"repo path repository git_repository object. Default '.'","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_detached.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if HEAD of repository is detached — is_detached","text":"TRUE repository HEAD detached, else     FALSE.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_detached.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if HEAD of repository is detached — is_detached","text":"","code":"if (FALSE) { # \\dontrun{ ## Create and initialize a repository in a temporary directory path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path) config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create a file, add and commit lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit_1 <- commit(repo, \"Commit message 1\")  ## Change file, add and commit lines <- c(   \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\",   \"eiusmod tempor incididunt ut labore et dolore magna aliqua.\") writeLines(lines, file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"Commit message 2\")  ## HEAD of repository is not detached is_detached(repo)  ## Checkout first commit checkout(commit_1)  ## HEAD of repository is detached is_detached(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/is_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if repository is empty — is_empty","title":"Check if repository is empty — is_empty","text":"Check repository empty","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if repository is empty — is_empty","text":"","code":"is_empty(repo = \".\")"},{"path":"https://docs.ropensci.org/git2r/reference/is_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if repository is empty — is_empty","text":"repo path repository git_repository object. Default '.'","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if repository is empty — is_empty","text":"TRUE repository empty else FALSE.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_empty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if repository is empty — is_empty","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Check if it's an empty repository is_empty(repo)  ## Commit a file writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Check if it's an empty repository is_empty(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/is_head.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if branch is head — is_head","title":"Check if branch is head — is_head","text":"Check branch head","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_head.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if branch is head — is_head","text":"","code":"is_head(branch = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/is_head.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if branch is head — is_head","text":"branch branch object check head.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_head.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if branch is head — is_head","text":"TRUE branch head, else FALSE.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_head.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if branch is head — is_head","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user and commit a file config(repo, user.name = \"Alice\", user.email = \"alice@example.org\") writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## List branches branches(repo)  ## Check that 'master' is_head master <- branches(repo)[[1]] is_head(master)  ## Create and checkout 'dev' branch checkout(repo, \"dev\", create = TRUE)  ## List branches branches(repo)  ## Check that 'master' is no longer head is_head(master) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/is_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if branch is local — is_local","title":"Check if branch is local — is_local","text":"Check branch local","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_local.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if branch is local — is_local","text":"","code":"is_local(branch)"},{"path":"https://docs.ropensci.org/git2r/reference/is_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if branch is local — is_local","text":"branch branch object check local","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_local.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if branch is local — is_local","text":"TRUE branch local, else FALSE.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_local.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if branch is local — is_local","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize repositories path_bare <- tempfile(pattern=\"git2r-\") path_repo <- tempfile(pattern=\"git2r-\") dir.create(path_bare) dir.create(path_repo) repo_bare <- init(path_bare, bare = TRUE) repo <- clone(path_bare, path_repo)  ## Config first user and commit a file config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Write to a file and commit lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path_repo, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Push commits from repository to bare repository ## Adds an upstream tracking branch to branch 'master' push(repo, \"origin\", \"refs/heads/master\")  ## List branches branches(repo)  ## Check if first branch is_local is_local(branches(repo)[[1]])  ## Check if second branch is_local is_local(branches(repo)[[2]]) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/is_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Is merge — is_merge","title":"Is merge — is_merge","text":"Determine commit merge commit, .e. one parent.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is merge — is_merge","text":"","code":"is_merge(commit = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/is_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is merge — is_merge","text":"commit git_commit object.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is merge — is_merge","text":"TRUE commit one parent, else FALSE","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is merge — is_merge","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user and commit a file config(repo, user.name = \"Alice\", user.email = \"alice@example.org\") writeLines(c(\"First line in file 1.\", \"Second line in file 1.\"),            file.path(path, \"example-1.txt\")) add(repo, \"example-1.txt\") commit(repo, \"First commit message\")  ## Create and add one more file writeLines(c(\"First line in file 2.\", \"Second line in file 2.\"),            file.path(path, \"example-2.txt\")) add(repo, \"example-2.txt\") commit(repo, \"Second commit message\")  ## Create a new branch 'fix' checkout(repo, \"fix\", create = TRUE)  ## Update 'example-1.txt' (swap words in first line) and commit writeLines(c(\"line First in file 1.\", \"Second line in file 1.\"),            file.path(path, \"example-1.txt\")) add(repo, \"example-1.txt\") commit(repo, \"Third commit message\")  checkout(repo, \"master\")  ## Update 'example-2.txt' (swap words in second line) and commit writeLines(c(\"First line in file 2.\", \"line Second in file 2.\"),            file.path(path, \"example-2.txt\")) add(repo, \"example-2.txt\") commit(repo, \"Fourth commit message\")  ## Merge 'fix' merge(repo, \"fix\")  ## Display parents of last commit parents(lookup(repo, branch_target(repository_head(repo))))  ## Check that last commit is a merge is_merge(lookup(repo, branch_target(repository_head(repo)))) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/is_shallow.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if the repository is a shallow clone — is_shallow","title":"Determine if the repository is a shallow clone — is_shallow","text":"Determine repository shallow clone","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_shallow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if the repository is a shallow clone — is_shallow","text":"","code":"is_shallow(repo = \".\")"},{"path":"https://docs.ropensci.org/git2r/reference/is_shallow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if the repository is a shallow clone — is_shallow","text":"repo path repository git_repository object. Default '.'","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_shallow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if the repository is a shallow clone — is_shallow","text":"TRUE shallow clone, else FALSE","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_shallow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine if the repository is a shallow clone — is_shallow","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize repository path_repo_1 <- tempfile(pattern=\"git2r-\") path_repo_2 <- tempfile(pattern=\"git2r-\") dir.create(path_repo_1) dir.create(path_repo_2) repo_1 <- init(path_repo_1)  ## Config user and commit a file config(repo_1, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Write to a file and commit lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path_repo_1, \"example.txt\")) add(repo_1, \"example.txt\") commit(repo_1, \"First commit message\")  ## Change file and commit lines <- c(   \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\",   \"eiusmod tempor incididunt ut labore et dolore magna aliqua.\") writeLines(lines, file.path(path_repo_1, \"example.txt\")) add(repo_1, \"example.txt\") commit(repo_1, \"Second commit message\")  ## Change file again and commit. lines <- c(   \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\",   \"eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\",   \"minim veniam, quis nostrud exercitation ullamco laboris nisi ut\") writeLines(lines, file.path(path_repo_1, \"example.txt\")) add(repo_1, \"example.txt\") commit(repo_1, \"Third commit message\")  ## Clone to second repository repo_2 <- clone(path_repo_1, path_repo_2)  ## Check if it's a shallow clone is_shallow(repo_2) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/is_tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if object is a git_tag object — is_tag","title":"Check if object is a git_tag object — is_tag","text":"Check object git_tag object","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_tag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if object is a git_tag object — is_tag","text":"","code":"is_tag(object)"},{"path":"https://docs.ropensci.org/git2r/reference/is_tag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if object is a git_tag object — is_tag","text":"object Check object git_tag object","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_tag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if object is a git_tag object — is_tag","text":"TRUE object git_tag, else FALSE","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_tag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if object is a git_tag object — is_tag","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Commit a text file writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Create tag tag(repo, \"Tagname\", \"Tag message\")  is_tag(tags(repo)[[1]]) is_tag(last_commit(repo)) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/is_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if object is S3 class git_tree — is_tree","title":"Check if object is S3 class git_tree — is_tree","text":"Check object S3 class git_tree","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if object is S3 class git_tree — is_tree","text":"","code":"is_tree(object)"},{"path":"https://docs.ropensci.org/git2r/reference/is_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if object is S3 class git_tree — is_tree","text":"object Check object S3 class git_tree","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if object is S3 class git_tree — is_tree","text":"TRUE object S3 class git_tree, else FALSE","code":""},{"path":"https://docs.ropensci.org/git2r/reference/is_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if object is S3 class git_tree — is_tree","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Commit a text file writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit_1 <- commit(repo, \"First commit message\") tree_1 <- tree(commit_1)  ## Check if tree is_tree(commit_1) is_tree(tree_1) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/last_commit.html","id":null,"dir":"Reference","previous_headings":"","what":"Last commit — last_commit","title":"Last commit — last_commit","text":"Get last commit current branch.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/last_commit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Last commit — last_commit","text":"","code":"last_commit(repo = \".\")"},{"path":"https://docs.ropensci.org/git2r/reference/last_commit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Last commit — last_commit","text":"repo path repository git_repository object. Default '.'","code":""},{"path":"https://docs.ropensci.org/git2r/reference/last_commit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Last commit — last_commit","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Config user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Write to a file and commit lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Get last commit last_commit(repo) last_commit(path)  ## Coerce the last commit to a data.frame as.data.frame(last_commit(path), \"data.frame\")  ## Summary of last commit in repository summary(last_commit(repo)) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/length.git_blob.html","id":null,"dir":"Reference","previous_headings":"","what":"Size in bytes of the contents of a blob — length.git_blob","title":"Size in bytes of the contents of a blob — length.git_blob","text":"Size bytes contents blob","code":""},{"path":"https://docs.ropensci.org/git2r/reference/length.git_blob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Size in bytes of the contents of a blob — length.git_blob","text":"","code":"# S3 method for class 'git_blob' length(x)"},{"path":"https://docs.ropensci.org/git2r/reference/length.git_blob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Size in bytes of the contents of a blob — length.git_blob","text":"x blob object","code":""},{"path":"https://docs.ropensci.org/git2r/reference/length.git_blob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Size in bytes of the contents of a blob — length.git_blob","text":"non-negative integer","code":""},{"path":"https://docs.ropensci.org/git2r/reference/length.git_blob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Size in bytes of the contents of a blob — length.git_blob","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Commit a text file writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit_1 <- commit(repo, \"First commit message\") blob_1 <- tree(commit_1)[\"example.txt\"]  ## Get length in size of bytes of the content of the blob length(blob_1) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/length.git_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of files in git_diff object — length.git_diff","title":"Number of files in git_diff object — length.git_diff","text":"Number files git_diff object","code":""},{"path":"https://docs.ropensci.org/git2r/reference/length.git_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of files in git_diff object — length.git_diff","text":"","code":"# S3 method for class 'git_diff' length(x)"},{"path":"https://docs.ropensci.org/git2r/reference/length.git_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of files in git_diff object — length.git_diff","text":"x git_diff object","code":""},{"path":"https://docs.ropensci.org/git2r/reference/length.git_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of files in git_diff object — length.git_diff","text":"non-negative integer","code":""},{"path":"https://docs.ropensci.org/git2r/reference/length.git_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of entries in tree — length.git_tree","title":"Number of entries in tree — length.git_tree","text":"Number entries tree","code":""},{"path":"https://docs.ropensci.org/git2r/reference/length.git_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of entries in tree — length.git_tree","text":"","code":"# S3 method for class 'git_tree' length(x)"},{"path":"https://docs.ropensci.org/git2r/reference/length.git_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of entries in tree — length.git_tree","text":"x tree object","code":""},{"path":"https://docs.ropensci.org/git2r/reference/length.git_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of entries in tree — length.git_tree","text":"non-negative integer double (rounded )","code":""},{"path":"https://docs.ropensci.org/git2r/reference/libgit2_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile time options for libgit2. — libgit2_features","title":"Compile time options for libgit2. — libgit2_features","text":"Compile time options libgit2.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/libgit2_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile time options for libgit2. — libgit2_features","text":"","code":"libgit2_features()"},{"path":"https://docs.ropensci.org/git2r/reference/libgit2_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile time options for libgit2. — libgit2_features","text":"list threads, https ssh set TRUE/FALSE.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/libgit2_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compile time options for libgit2. — libgit2_features","text":"","code":"libgit2_features() #> $threads #> [1] TRUE #>  #> $https #> [1] TRUE #>  #> $ssh #> [1] TRUE #>"},{"path":"https://docs.ropensci.org/git2r/reference/libgit2_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Version of the libgit2 library — libgit2_version","title":"Version of the libgit2 library — libgit2_version","text":"Version libgit2 library bundled source code based ","code":""},{"path":"https://docs.ropensci.org/git2r/reference/libgit2_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Version of the libgit2 library — libgit2_version","text":"","code":"libgit2_version()"},{"path":"https://docs.ropensci.org/git2r/reference/libgit2_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Version of the libgit2 library — libgit2_version","text":"list major, minor rev","code":""},{"path":"https://docs.ropensci.org/git2r/reference/libgit2_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Version of the libgit2 library — libgit2_version","text":"","code":"libgit2_version() #> $major #> [1] 1 #>  #> $minor #> [1] 7 #>  #> $rev #> [1] 2 #>"},{"path":"https://docs.ropensci.org/git2r/reference/lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup — lookup","title":"Lookup — lookup","text":"Lookup one object repository.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup — lookup","text":"","code":"lookup(repo = \".\", sha = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup — lookup","text":"repo path repository git_repository object. Default '.' sha identity object lookup. Must 4 40 characters long.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup — lookup","text":"git_blob git_commit git_tag git_tree object","code":""},{"path":"https://docs.ropensci.org/git2r/reference/lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup — lookup","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user and commit a file config(repo, user.name = \"Alice\", user.email = \"alice@example.org\") lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit_1 <- commit(repo, \"First commit message\")  ## Create tag tag(repo, \"Tagname\", \"Tag message\")  ## First, get SHAs to lookup in the repository sha_commit <- sha(commit_1) sha_tree <- sha(tree(commit_1)) sha_blob <- sha(tree(commit_1)[\"example.txt\"]) sha_tag <- sha(tags(repo)[[1]])  ## SHAs sha_commit sha_tree sha_blob sha_tag  ## Lookup objects lookup(repo, sha_commit) lookup(repo, sha_tree) lookup(repo, sha_blob) lookup(repo, sha_tag)  ## Lookup objects, using only the first seven characters lookup(repo, substr(sha_commit, 1, 7)) lookup(repo, substr(sha_tree, 1, 7)) lookup(repo, substr(sha_blob, 1, 7)) lookup(repo, substr(sha_tag, 1, 7)) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/lookup_commit.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup the commit related to a git object — lookup_commit","title":"Lookup the commit related to a git object — lookup_commit","text":"Lookup commit related git_reference, git_tag git_branch object.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/lookup_commit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup the commit related to a git object — lookup_commit","text":"","code":"lookup_commit(object)  # S3 method for class 'git_branch' lookup_commit(object)  # S3 method for class 'git_commit' lookup_commit(object)  # S3 method for class 'git_tag' lookup_commit(object)  # S3 method for class 'git_reference' lookup_commit(object)"},{"path":"https://docs.ropensci.org/git2r/reference/lookup_commit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lookup the commit related to a git object — lookup_commit","text":"object git object get related commit .","code":""},{"path":"https://docs.ropensci.org/git2r/reference/lookup_commit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lookup the commit related to a git object — lookup_commit","text":"git commit object.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/lookup_commit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lookup the commit related to a git object — lookup_commit","text":"","code":"if (FALSE) { # \\dontrun{ ## Create a directory in tempdir path <- tempfile(pattern=\"git2r-\") dir.create(path)  ## Initialize a repository repo <- init(path) config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create a file, add and commit lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, con = file.path(path, \"test.txt\")) add(repo, \"test.txt\") commit(repo, \"Commit message 1\")  ## Get the commit pointed to by the 'master' branch lookup_commit(repository_head(repo))  ## Create a tag a_tag <- tag(repo, \"Tagname\", \"Tag message\")  ## Get the commit pointed to by 'a_tag' lookup_commit(a_tag) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/ls_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"List the contents of a tree object — ls_tree","title":"List the contents of a tree object — ls_tree","text":"Traverse entries tree subtrees.  Akin 'git ls-tree' command.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/ls_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the contents of a tree object — ls_tree","text":"","code":"ls_tree(tree = NULL, repo = \".\", recursive = TRUE)"},{"path":"https://docs.ropensci.org/git2r/reference/ls_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the contents of a tree object — ls_tree","text":"tree default (NULL) tree last commit repo. Can also git_tree object character identifies tree repository (see ‘Examples’). repo never used tree git_tree object. git_repository object, path (default = '.') repository. recursive default recurse sub-trees.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/ls_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the contents of a tree object — ls_tree","text":"data.frame following columns: mode UNIX file attribute tree entry type type object sha sha object path path relative root tree name filename tree entry len object size     blob (file) entries. NA objects.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/ls_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the contents of a tree object — ls_tree","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) dir.create(file.path(path, \"subfolder\")) repo <- init(path)  ## Create a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create three files and commit writeLines(\"First file\",  file.path(path, \"example-1.txt\")) writeLines(\"Second file\", file.path(path, \"subfolder/example-2.txt\")) writeLines(\"Third file\",  file.path(path, \"example-3.txt\")) add(repo, c(\"example-1.txt\", \"subfolder/example-2.txt\", \"example-3.txt\")) commit(repo, \"Commit message\")  ## Traverse tree entries and its subtrees. ## Various approaches that give identical result. ls_tree(tree = tree(last_commit(path))) ls_tree(tree = tree(last_commit(repo))) ls_tree(repo = path) ls_tree(repo = repo)  ## Skip content in subfolder ls_tree(repo = repo, recursive = FALSE)  ## Start in subfolder ls_tree(tree = \"HEAD:subfolder\", repo = repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge a branch into HEAD — merge.git_branch","title":"Merge a branch into HEAD — merge.git_branch","text":"Merge branch HEAD","code":""},{"path":"https://docs.ropensci.org/git2r/reference/merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge a branch into HEAD — merge.git_branch","text":"","code":"# S3 method for class 'git_branch' merge(x, y = NULL, commit_on_success = TRUE, merger = NULL, fail = FALSE, ...)  # S3 method for class 'git_repository' merge(x, y = NULL, commit_on_success = TRUE, merger = NULL, fail = FALSE, ...)  # S3 method for class 'character' merge(   x = \".\",   y = NULL,   commit_on_success = TRUE,   merger = NULL,   fail = FALSE,   ... )"},{"path":"https://docs.ropensci.org/git2r/reference/merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge a branch into HEAD — merge.git_branch","text":"x path (default '.') repository, git_repository object, git_branch. y x git_repository, name branch merge HEAD. used x git_branch. commit_on_success conflicts written index, merge commit committed. Default TRUE. merger made merge. default (NULL) use default_signature repository. fail conflict occurs, exit immediately instead attempting continue resolving conflicts. Default FALSE. ... Additional arguments (unused).","code":""},{"path":"https://docs.ropensci.org/git2r/reference/merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge a branch into HEAD — merge.git_branch","text":"list class git_merge_result entries: up_to_date TRUE merge already --date, else FALSE. fast_forward TRUE fast-forward merge, else FALSE. conflicts TRUE index contain entries representing file conflicts,     else FALSE. sha merge created merge commit, sha merge     commit. NA merge commit created.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge a branch into HEAD — merge.git_branch","text":"","code":"if (FALSE) { # \\dontrun{ ## Create a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path) config(repo, user.name=\"Alice\", user.email = \"alice@example.org\")  ## Create a file, add and commit writeLines(\"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\",            con = file.path(path, \"test.txt\")) add(repo, \"test.txt\") commit_1 <- commit(repo, \"Commit message 1\")  ## Create first branch, checkout, add file and commit checkout(repo, \"branch1\", create = TRUE) writeLines(\"Branch 1\", file.path(path, \"branch-1.txt\")) add(repo, \"branch-1.txt\") commit(repo, \"Commit message branch 1\")  ## Create second branch, checkout, add file and commit b_2 <- branch_create(commit_1, \"branch2\") checkout(b_2) writeLines(\"Branch 2\", file.path(path, \"branch-2.txt\")) add(repo, \"branch-2.txt\") commit(repo, \"Commit message branch 2\")  ## Make a change to 'test.txt' writeLines(c(\"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\",              \"eiusmod tempor incididunt ut labore et dolore magna aliqua.\"),            con = file.path(path, \"test.txt\")) add(repo, \"test.txt\") commit(repo, \"Second commit message branch 2\")  ## Checkout master checkout(repo, \"master\", force = TRUE)  ## Merge branch 1 merge(repo, \"branch1\")  ## Merge branch 2 merge(repo, \"branch2\")  ## Create third branch, checkout, change file and commit checkout(repo, \"branch3\", create=TRUE) writeLines(c(\"Lorem ipsum dolor amet sit, consectetur adipisicing elit, sed do\",              \"eiusmod tempor incididunt ut labore et dolore magna aliqua.\"),            con = file.path(path, \"test.txt\")) add(repo, \"test.txt\") commit(repo, \"Commit message branch 3\")  ## Checkout master and create a change that creates a merge conflict checkout(repo, \"master\", force=TRUE) writeLines(c(\"Lorem ipsum dolor sit amet, adipisicing consectetur elit, sed do\",              \"eiusmod tempor incididunt ut labore et dolore magna aliqua.\"),            con = file.path(path, \"test.txt\")) add(repo, \"test.txt\") commit(repo, \"Some commit message branch 1\")  ## Merge branch 3 merge(repo, \"branch3\")  ## Check status; Expect to have one unstaged unmerged conflict. status(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/merge_base.html","id":null,"dir":"Reference","previous_headings":"","what":"Find a merge base between two commits — merge_base","title":"Find a merge base between two commits — merge_base","text":"Find merge base two commits","code":""},{"path":"https://docs.ropensci.org/git2r/reference/merge_base.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find a merge base between two commits — merge_base","text":"","code":"merge_base(one = NULL, two = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/merge_base.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find a merge base between two commits — merge_base","text":"one One commits two commit","code":""},{"path":"https://docs.ropensci.org/git2r/reference/merge_base.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find a merge base between two commits — merge_base","text":"git_commit","code":""},{"path":"https://docs.ropensci.org/git2r/reference/merge_base.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find a merge base between two commits — merge_base","text":"","code":"if (FALSE) { # \\dontrun{ ## Create a directory in tempdir path <- tempfile(pattern=\"git2r-\") dir.create(path)  ## Initialize a repository repo <- init(path) config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create a file, add and commit writeLines(\"Master branch\", file.path(path, \"master_branch.txt\")) add(repo, \"master_branch.txt\") commit_1 <- commit(repo, \"Commit message 1\")  ## Create first branch, checkout, add file and commit branch_1 <- branch_create(commit_1, \"branch_1\") checkout(branch_1) writeLines(\"Branch 1\", file.path(path, \"branch_1.txt\")) add(repo, \"branch_1.txt\") commit_2 <- commit(repo, \"Commit message branch_1\")  ## Create second branch, checkout, add file and commit branch_2 <- branch_create(commit_1, \"branch_2\") checkout(branch_2) writeLines(\"Branch 2\", file.path(path, \"branch_2.txt\")) add(repo, \"branch_2.txt\") commit_3 <- commit(repo, \"Commit message branch_2\")  ## Check that merge base equals commit_1 stopifnot(identical(merge_base(commit_2, commit_3), commit_1)) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/note_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Add note for a object — note_create","title":"Add note for a object — note_create","text":"Add note object","code":""},{"path":"https://docs.ropensci.org/git2r/reference/note_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add note for a object — note_create","text":"","code":"note_create(   object = NULL,   message = NULL,   ref = NULL,   author = NULL,   committer = NULL,   force = FALSE )"},{"path":"https://docs.ropensci.org/git2r/reference/note_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add note for a object — note_create","text":"object object annotate (git_blob, git_commit git_tree). message Content note add ref Canonical name reference use. Default note_default_ref. author Signature notes note author committer Signature notes note committer force Overwrite existing note. Default FALSE","code":""},{"path":"https://docs.ropensci.org/git2r/reference/note_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add note for a object — note_create","text":"git_note","code":""},{"path":"https://docs.ropensci.org/git2r/reference/note_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add note for a object — note_create","text":"","code":"if (FALSE) { # \\dontrun{ ## Create and initialize a repository in a temporary directory path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path) config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create a file, add and commit writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit_1 <- commit(repo, \"Commit message 1\")  ## Create another commit writeLines(c(\"Hello world!\",              \"HELLO WORLD!\"),            file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit_2 <- commit(repo, \"Commit message 2\")  ## Check that notes is an empty list notes(repo)  ## Create note in default namespace note_create(commit_1, \"Note-1\")  ## Create note in named (review) namespace note_create(commit_1, \"Note-2\", ref=\"refs/notes/review\") note_create(commit_2, \"Note-3\", ref=\"review\")  ## Create note on blob and tree note_create(tree(commit_1), \"Note-4\") note_create(tree(commit_1)[\"example.txt\"], \"Note-5\") } # }"},{"path":"https://docs.ropensci.org/git2r/reference/note_default_ref.html","id":null,"dir":"Reference","previous_headings":"","what":"Default notes reference — note_default_ref","title":"Default notes reference — note_default_ref","text":"Get default notes reference repository","code":""},{"path":"https://docs.ropensci.org/git2r/reference/note_default_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default notes reference — note_default_ref","text":"","code":"note_default_ref(repo = \".\")"},{"path":"https://docs.ropensci.org/git2r/reference/note_default_ref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default notes reference — note_default_ref","text":"repo path repository git_repository object. Default '.'","code":""},{"path":"https://docs.ropensci.org/git2r/reference/note_default_ref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default notes reference — note_default_ref","text":"Character vector length one name default notes     reference","code":""},{"path":"https://docs.ropensci.org/git2r/reference/note_default_ref.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default notes reference — note_default_ref","text":"","code":"if (FALSE) { # \\dontrun{ ## Create and initialize a repository in a temporary directory path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path) config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## View default notes reference note_default_ref(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/note_remove.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove the note for an object — note_remove","title":"Remove the note for an object — note_remove","text":"Remove note object","code":""},{"path":"https://docs.ropensci.org/git2r/reference/note_remove.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove the note for an object — note_remove","text":"","code":"note_remove(note = NULL, author = NULL, committer = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/note_remove.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove the note for an object — note_remove","text":"note note remove author Signature notes commit author. committer Signature notes commit committer.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/note_remove.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove the note for an object — note_remove","text":"invisible NULL","code":""},{"path":"https://docs.ropensci.org/git2r/reference/note_remove.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove the note for an object — note_remove","text":"","code":"if (FALSE) { # \\dontrun{ ## Create and initialize a repository in a temporary directory path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path) config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create a file, add and commit writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit_1 <- commit(repo, \"Commit message 1\")   ## Create note in default namespace note_1 <- note_create(commit_1, \"Note-1\")  ## Create note in named (review) namespace note_2 <- note_create(commit_1, \"Note-2\", ref=\"refs/notes/review\")  ## List notes in default namespace notes(repo)  ## List notes in 'review' namespace notes(repo, \"review\")  ## Remove notes note_remove(note_1) note_remove(note_2)  ## List notes in default namespace notes(repo)  ## List notes in 'review' namespace notes(repo, \"review\") } # }"},{"path":"https://docs.ropensci.org/git2r/reference/notes.html","id":null,"dir":"Reference","previous_headings":"","what":"List notes — notes","title":"List notes — notes","text":"List notes within specified namespace.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/notes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List notes — notes","text":"","code":"notes(repo = \".\", ref = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/notes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List notes — notes","text":"repo path repository git_repository object. Default '.' ref Reference read . Default (ref = NULL) call note_default_ref.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/notes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List notes — notes","text":"list git_note objects","code":""},{"path":"https://docs.ropensci.org/git2r/reference/notes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List notes — notes","text":"","code":"if (FALSE) { # \\dontrun{ ## Create and initialize a repository in a temporary directory path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path) config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create a file, add and commit writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit_1 <- commit(repo, \"Commit message 1\")  ## Create another commit writeLines(c(\"Hello world!\",              \"HELLO WORLD!\"),            file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit_2 <- commit(repo, \"Commit message 2\")  ## Create note in default namespace note_create(commit_1, \"Note-1\") note_create(commit_1, \"Note-2\", force = TRUE)  ## Create note in named (review) namespace note_create(commit_1, \"Note-3\", ref=\"refs/notes/review\") note_create(commit_2, \"Note-4\", ref=\"review\")  ## Create note on blob and tree note_create(tree(commit_1), \"Note-5\") note_create(tree(commit_1)[\"example.txt\"], \"Note-6\")  ## List notes in default namespace notes(repo)  ## List notes in 'review' namespace notes(repo, \"review\") } # }"},{"path":"https://docs.ropensci.org/git2r/reference/odb_blobs.html","id":null,"dir":"Reference","previous_headings":"","what":"Blobs in the object database — odb_blobs","title":"Blobs in the object database — odb_blobs","text":"List blobs reachable commits object database. commit, list blob's commit tree sub-trees.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/odb_blobs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Blobs in the object database — odb_blobs","text":"","code":"odb_blobs(repo = \".\")"},{"path":"https://docs.ropensci.org/git2r/reference/odb_blobs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Blobs in the object database — odb_blobs","text":"repo path repository git_repository object. Default '.'","code":""},{"path":"https://docs.ropensci.org/git2r/reference/odb_blobs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Blobs in the object database — odb_blobs","text":"data.frame following columns: sha sha blob path path blob tree sub-trees name name blob tree contains blob len length blob commit sha commit author author commit timestamp author signature commit","code":""},{"path":"https://docs.ropensci.org/git2r/reference/odb_blobs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Blobs in the object database — odb_blobs","text":"blob sha can several entries","code":""},{"path":"https://docs.ropensci.org/git2r/reference/odb_blobs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Blobs in the object database — odb_blobs","text":"","code":"if (FALSE) { # \\dontrun{ ## Create a directory in tempdir path <- tempfile(pattern=\"git2r-\") dir.create(path)  ## Initialize a repository repo <- init(path) config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create a file, add and commit lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path, \"test.txt\")) add(repo, \"test.txt\") commit(repo, \"Commit message 1\")  ## Change file and commit lines <- c(   \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\",   \"eiusmod tempor incididunt ut labore et dolore magna aliqua.\") writeLines(lines, file.path(path, \"test.txt\")) add(repo, \"test.txt\") commit(repo, \"Commit message 2\")  ## Commit same content under different name in a sub-directory dir.create(file.path(path, \"sub-directory\")) file.copy(file.path(path, \"test.txt\"),           file.path(path, \"sub-directory\", \"copy.txt\")) add(repo, \"sub-directory/copy.txt\") commit(repo, \"Commit message 3\")  ## List blobs odb_blobs(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/odb_objects.html","id":null,"dir":"Reference","previous_headings":"","what":"List all objects available in the database — odb_objects","title":"List all objects available in the database — odb_objects","text":"List objects available database","code":""},{"path":"https://docs.ropensci.org/git2r/reference/odb_objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all objects available in the database — odb_objects","text":"","code":"odb_objects(repo = \".\")"},{"path":"https://docs.ropensci.org/git2r/reference/odb_objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all objects available in the database — odb_objects","text":"repo path repository git_repository object. Default '.'","code":""},{"path":"https://docs.ropensci.org/git2r/reference/odb_objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all objects available in the database — odb_objects","text":"data.frame following columns: sha sha object type type object len length object","code":""},{"path":"https://docs.ropensci.org/git2r/reference/odb_objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all objects available in the database — odb_objects","text":"","code":"if (FALSE) { # \\dontrun{ ## Create a directory in tempdir path <- tempfile(pattern=\"git2r-\") dir.create(path)  ## Initialize a repository repo <- init(path) config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create a file, add and commit lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path, \"test.txt\")) add(repo, \"test.txt\") commit(repo, \"Commit message 1\")  ## Create tag tag(repo, \"Tagname\", \"Tag message\")  ## List objects in repository odb_objects(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/parents.html","id":null,"dir":"Reference","previous_headings":"","what":"Parents — parents","title":"Parents — parents","text":"Get parents commit.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/parents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parents — parents","text":"","code":"parents(object = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/parents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parents — parents","text":"object git_commit object.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/parents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parents — parents","text":"list git_commit objects","code":""},{"path":"https://docs.ropensci.org/git2r/reference/parents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parents — parents","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user and commit a file config(repo, user.name = \"Alice\", user.email = \"alice@example.org\") writeLines(\"First line.\",            file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit_1 <- commit(repo, \"First commit message\")  ## commit_1 has no parents parents(commit_1)  ## Update 'example.txt' and commit writeLines(c(\"First line.\", \"Second line.\"),            file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit_2 <- commit(repo, \"Second commit message\")  ## commit_2 has commit_1 as parent parents(commit_2) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/plot.git_repository.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot commits over time — plot.git_repository","title":"Plot commits over time — plot.git_repository","text":"Plot commits time","code":""},{"path":"https://docs.ropensci.org/git2r/reference/plot.git_repository.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot commits over time — plot.git_repository","text":"","code":"# S3 method for class 'git_repository' plot(   x,   breaks = c(\"month\", \"year\", \"quarter\", \"week\", \"day\"),   main = NULL,   ... )"},{"path":"https://docs.ropensci.org/git2r/reference/plot.git_repository.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot commits over time — plot.git_repository","text":"x repository plot breaks Default month. Change year, quarter, week day necessary. main Default title plot \"Commits repo:\" repository workdir basename. Supply new title desire one. ... Additional arguments affecting plot","code":""},{"path":"https://docs.ropensci.org/git2r/reference/plot.git_repository.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot commits over time — plot.git_repository","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- clone(\"https://github.com/ropensci/git2r.git\", path)  ## Plot commits plot(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/print.git_reflog_entry.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a reflog entry — print.git_reflog_entry","title":"Print a reflog entry — print.git_reflog_entry","text":"Print reflog entry","code":""},{"path":"https://docs.ropensci.org/git2r/reference/print.git_reflog_entry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a reflog entry — print.git_reflog_entry","text":"","code":"# S3 method for class 'git_reflog_entry' print(x, ...)"},{"path":"https://docs.ropensci.org/git2r/reference/print.git_reflog_entry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a reflog entry — print.git_reflog_entry","text":"x reflog entry ... Unused","code":""},{"path":"https://docs.ropensci.org/git2r/reference/print.git_reflog_entry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a reflog entry — print.git_reflog_entry","text":"None (invisible 'NULL').","code":""},{"path":"https://docs.ropensci.org/git2r/reference/print.git_reflog_entry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a reflog entry — print.git_reflog_entry","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user and commit a file config(repo, user.name = \"Alice\", user.email = \"alice@example.org\") writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## View repository HEAD reflog reflog(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/pull.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull — pull","title":"Pull — pull","text":"Pull","code":""},{"path":"https://docs.ropensci.org/git2r/reference/pull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull — pull","text":"","code":"pull(repo = \".\", credentials = NULL, merger = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/pull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull — pull","text":"repo path repository git_repository object. Default '.' credentials credentials remote repository access. Default NULL. use query ssh-agent ssh key credentials, let parameter NULL (default). merger made merge, merge non-fast forward merge creates merge commit. default_signature repo used parameter NULL.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/pull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull — pull","text":"list class git_merge_result entries: up_to_date TRUE merge already --date, else FALSE. fast_forward TRUE fast-forward merge, else FALSE. conflicts TRUE index contain entries representing file conflicts,     else FALSE. sha merge created merge commit, sha merge     commit. NA merge commit created.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/pull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pull — pull","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize repositories path_bare <- tempfile(pattern=\"git2r-\") path_repo_1 <- tempfile(pattern=\"git2r-\") path_repo_2 <- tempfile(pattern=\"git2r-\") dir.create(path_bare) dir.create(path_repo_1) dir.create(path_repo_2) repo_bare <- init(path_bare, bare = TRUE) repo_1 <- clone(path_bare, path_repo_1)  ## Config first user and commit a file config(repo_1, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Write to a file and commit lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path_repo_1, \"example.txt\")) add(repo_1, \"example.txt\") commit(repo_1, \"First commit message\")  ## Push commits from first repository to bare repository ## Adds an upstream tracking branch to branch 'master' push(repo_1, \"origin\", \"refs/heads/master\")  ## Clone to second repository repo_2 <- clone(path_bare, path_repo_2) config(repo_2, user.name = \"Bob\", user.email = \"bob@example.org\")  ## Change file and commit lines <- c(   \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\",   \"eiusmod tempor incididunt ut labore et dolore magna aliqua.\") writeLines(lines, file.path(path_repo_1, \"example.txt\")) add(repo_1, \"example.txt\") commit(repo_1, \"Second commit message\")  ## Push commits from first repository to bare repository push(repo_1)  ## Pull changes to repo_2 pull(repo_2)  ## Change file again and commit. This time in repository 2 lines <- c(   \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\",   \"eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\",   \"minim veniam, quis nostrud exercitation ullamco laboris nisi ut\") writeLines(lines, file.path(path_repo_2, \"example.txt\")) add(repo_2, \"example.txt\") commit(repo_2, \"Third commit message\")  ## Push commits from second repository to bare repository push(repo_2)  ## Pull changes to repo_1 pull(repo_1)  ## List commits in repositories commits(repo_1) commits(repo_2) commits(repo_bare) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/punch_card.html","id":null,"dir":"Reference","previous_headings":"","what":"Punch card — punch_card","title":"Punch card — punch_card","text":"Punch card","code":""},{"path":"https://docs.ropensci.org/git2r/reference/punch_card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Punch card — punch_card","text":"","code":"punch_card(repo = \".\", main = NULL, ...)"},{"path":"https://docs.ropensci.org/git2r/reference/punch_card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Punch card — punch_card","text":"repo path repository git_repository object. Default '.' main Default title plot \"Punch card repo:\" repository workdir basename. Supply new title desire one. ... Additional arguments affecting plot","code":""},{"path":"https://docs.ropensci.org/git2r/reference/punch_card.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Punch card — punch_card","text":"invisible NULL","code":""},{"path":"https://docs.ropensci.org/git2r/reference/punch_card.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Punch card — punch_card","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- clone(\"https://github.com/ropensci/git2r.git\", path)  ## Plot punch_card(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/push.html","id":null,"dir":"Reference","previous_headings":"","what":"Push — push","title":"Push — push","text":"Push","code":""},{"path":"https://docs.ropensci.org/git2r/reference/push.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Push — push","text":"","code":"push(   object = \".\",   name = NULL,   refspec = NULL,   force = FALSE,   credentials = NULL,   set_upstream = FALSE )"},{"path":"https://docs.ropensci.org/git2r/reference/push.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Push — push","text":"object path repository, git_repository git_branch. name remote's name. Default NULL. refspec refspec pushed. Default NULL. force Force local revision remote repo. Use care. Default FALSE. credentials credentials remote repository access. Default NULL. use query ssh-agent ssh key credentials, let parameter NULL (default). set_upstream Set current local branch track remote branch. Default FALSE.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/push.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Push — push","text":"invisible(NULL)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/reference/push.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Push — push","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize two temporary repositories path_bare <- tempfile(pattern=\"git2r-\") path_repo <- tempfile(pattern=\"git2r-\") dir.create(path_bare) dir.create(path_repo) repo_bare <- init(path_bare, bare = TRUE)  ## Clone the bare repository. This creates remote-tracking ## branches for each branch in the cloned repository. repo <- clone(path_bare, path_repo)  ## Config user and commit a file config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Write to a file and commit lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path_repo, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Push commits from repository to bare repository push(repo, \"origin\", \"refs/heads/master\")  ## Now, unset the remote-tracking branch to NULL to demonstrate ## the 'set_upstream' argument. Then push with 'set_upstream = TRUE' ## to add the upstream tracking branch to branch 'master' again. branch_get_upstream(repository_head(repo)) branch_set_upstream(repository_head(repo), NULL) branch_get_upstream(repository_head(repo)) push(repo, \"origin\", \"refs/heads/master\", set_upstream = TRUE) branch_get_upstream(repository_head(repo))  ## Change file and commit lines <- c(   \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\",   \"eiusmod tempor incididunt ut labore et dolore magna aliqua.\") writeLines(lines, file.path(path_repo, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"Second commit message\")  ## Push commits from repository to bare repository push(repo)  ## List commits in repository and bare repository commits(repo) commits(repo_bare) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. base .data.frame, diff, merge utils head","code":""},{"path":"https://docs.ropensci.org/git2r/reference/references.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all references that can be found in a repository. — references","title":"Get all references that can be found in a repository. — references","text":"Get references can found repository.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/references.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all references that can be found in a repository. — references","text":"","code":"references(repo = \".\")"},{"path":"https://docs.ropensci.org/git2r/reference/references.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all references that can be found in a repository. — references","text":"repo path repository git_repository object. Default '.'","code":""},{"path":"https://docs.ropensci.org/git2r/reference/references.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all references that can be found in a repository. — references","text":"Character vector references","code":""},{"path":"https://docs.ropensci.org/git2r/reference/references.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all references that can be found in a repository. — references","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize two temporary repositories path_bare <- tempfile(pattern=\"git2r-\") path_repo <- tempfile(pattern=\"git2r-\") dir.create(path_bare) dir.create(path_repo) repo_bare <- init(path_bare, bare = TRUE) repo <- clone(path_bare, path_repo)  ## Config user and commit a file config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Write to a file and commit lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path_repo, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Push commits from repository to bare repository ## Adds an upstream tracking branch to branch 'master' push(repo, \"origin\", \"refs/heads/master\")  ## Add tag to HEAD tag(repo, \"v1.0\", \"First version\")  ## Create a note note_create(commits(repo)[[1]], \"My note\")  ## List all references in repository references(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/reflog.html","id":null,"dir":"Reference","previous_headings":"","what":"List and view reflog information — reflog","title":"List and view reflog information — reflog","text":"List view reflog information","code":""},{"path":"https://docs.ropensci.org/git2r/reference/reflog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List and view reflog information — reflog","text":"","code":"reflog(repo = \".\", refname = \"HEAD\")"},{"path":"https://docs.ropensci.org/git2r/reference/reflog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List and view reflog information — reflog","text":"repo path repository git_repository object. Default '.' refname name reference list. 'HEAD' default.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/reflog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List and view reflog information — reflog","text":"S3 class git_reflog git_reflog_entry objects.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/reflog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List and view reflog information — reflog","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Config user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Write to a file and commit lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Change file and commit lines <- c(   \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\",   \"eiusmod tempor incididunt ut labore et dolore magna aliqua.\") writeLines(lines, file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"Second commit message\")  ## Change file again and commit lines <- c(   \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\",   \"eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\",   \"minim veniam, quis nostrud exercitation ullamco laboris nisi ut\") writeLines(lines, file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"Third commit message\")  ## View reflog reflog(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/remote_add.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a remote to a repo — remote_add","title":"Add a remote to a repo — remote_add","text":"Add remote repo","code":""},{"path":"https://docs.ropensci.org/git2r/reference/remote_add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a remote to a repo — remote_add","text":"","code":"remote_add(repo = \".\", name = NULL, url = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/remote_add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a remote to a repo — remote_add","text":"repo path repository git_repository object. Default '.' name Short name remote repository url URL remote repository","code":""},{"path":"https://docs.ropensci.org/git2r/reference/remote_add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a remote to a repo — remote_add","text":"NULL, invisibly","code":""},{"path":"https://docs.ropensci.org/git2r/reference/remote_add.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a remote to a repo — remote_add","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user and commit a file config(repo, user.name=\"Alice\", user.email=\"alice@example.org\") writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Add a remote remote_add(repo, \"playground\", \"https://example.org/git2r/playground\") remotes(repo) remote_url(repo, \"playground\")  ## Rename a remote remote_rename(repo, \"playground\", \"foobar\") remotes(repo) remote_url(repo, \"foobar\")  ## Set remote url remote_set_url(repo, \"foobar\", \"https://example.org/git2r/foobar\") remotes(repo) remote_url(repo, \"foobar\")  ## Remove a remote remote_remove(repo, \"foobar\") remotes(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/remote_ls.html","id":null,"dir":"Reference","previous_headings":"","what":"List references in a remote repository — remote_ls","title":"List references in a remote repository — remote_ls","text":"Displays references available remote repository along associated commit IDs.  Akin 'git ls-remote' command.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/remote_ls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List references in a remote repository — remote_ls","text":"","code":"remote_ls(name = NULL, repo = NULL, credentials = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/remote_ls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List references in a remote repository — remote_ls","text":"name Character vector \"remote\" repository URL query name remote repo argument given. repo optional repository object used remotes specified name. credentials credentials remote repository access. Default NULL. use query ssh-agent ssh key credentials, let parameter NULL (default).","code":""},{"path":"https://docs.ropensci.org/git2r/reference/remote_ls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List references in a remote repository — remote_ls","text":"Character vector reference associated     commit IDs.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/remote_ls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List references in a remote repository — remote_ls","text":"","code":"if (FALSE) { # \\dontrun{ remote_ls(\"https://github.com/ropensci/git2r\") } # }"},{"path":"https://docs.ropensci.org/git2r/reference/remote_remove.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a remote — remote_remove","title":"Remove a remote — remote_remove","text":"remote-tracking branches configuration settings remote removed.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/remote_remove.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a remote — remote_remove","text":"","code":"remote_remove(repo = \".\", name = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/remote_remove.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a remote — remote_remove","text":"repo path repository git_repository object. Default '.' name name remote remove","code":""},{"path":"https://docs.ropensci.org/git2r/reference/remote_remove.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a remote — remote_remove","text":"NULL, invisibly","code":""},{"path":"https://docs.ropensci.org/git2r/reference/remote_remove.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a remote — remote_remove","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user and commit a file config(repo, user.name=\"Alice\", user.email=\"alice@example.org\") writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Add a remote remote_add(repo, \"playground\", \"https://example.org/git2r/playground\") remotes(repo) remote_url(repo, \"playground\")  ## Rename a remote remote_rename(repo, \"playground\", \"foobar\") remotes(repo) remote_url(repo, \"foobar\")  ## Set remote url remote_set_url(repo, \"foobar\", \"https://example.org/git2r/foobar\") remotes(repo) remote_url(repo, \"foobar\")  ## Remove a remote remote_remove(repo, \"foobar\") remotes(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/remote_rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename a remote — remote_rename","title":"Rename a remote — remote_rename","text":"Rename remote","code":""},{"path":"https://docs.ropensci.org/git2r/reference/remote_rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename a remote — remote_rename","text":"","code":"remote_rename(repo = \".\", oldname = NULL, newname = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/remote_rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename a remote — remote_rename","text":"repo path repository git_repository object. Default '.' oldname Old name remote newname New name remote","code":""},{"path":"https://docs.ropensci.org/git2r/reference/remote_rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename a remote — remote_rename","text":"NULL, invisibly","code":""},{"path":"https://docs.ropensci.org/git2r/reference/remote_rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename a remote — remote_rename","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user and commit a file config(repo, user.name=\"Alice\", user.email=\"alice@example.org\") writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Add a remote remote_add(repo, \"playground\", \"https://example.org/git2r/playground\") remotes(repo) remote_url(repo, \"playground\")  ## Rename a remote remote_rename(repo, \"playground\", \"foobar\") remotes(repo) remote_url(repo, \"foobar\")  ## Set remote url remote_set_url(repo, \"foobar\", \"https://example.org/git2r/foobar\") remotes(repo) remote_url(repo, \"foobar\")  ## Remove a remote remote_remove(repo, \"foobar\") remotes(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/remote_set_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the remote's url in the configuration — remote_set_url","title":"Set the remote's url in the configuration — remote_set_url","text":"assumes common case single-url remote otherwise raise error.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/remote_set_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the remote's url in the configuration — remote_set_url","text":"","code":"remote_set_url(repo = \".\", name = NULL, url = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/remote_set_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the remote's url in the configuration — remote_set_url","text":"repo path repository git_repository object. Default '.' name name remote url url set","code":""},{"path":"https://docs.ropensci.org/git2r/reference/remote_set_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the remote's url in the configuration — remote_set_url","text":"NULL, invisibly","code":""},{"path":"https://docs.ropensci.org/git2r/reference/remote_set_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the remote's url in the configuration — remote_set_url","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user and commit a file config(repo, user.name=\"Alice\", user.email=\"alice@example.org\") writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Add a remote remote_add(repo, \"playground\", \"https://example.org/git2r/playground\") remotes(repo) remote_url(repo, \"playground\")  ## Rename a remote remote_rename(repo, \"playground\", \"foobar\") remotes(repo) remote_url(repo, \"foobar\")  ## Set remote url remote_set_url(repo, \"foobar\", \"https://example.org/git2r/foobar\") remotes(repo) remote_url(repo, \"foobar\")  ## Remove a remote remote_remove(repo, \"foobar\") remotes(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/remote_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the remote url for remotes in a repo — remote_url","title":"Get the remote url for remotes in a repo — remote_url","text":"Get remote url remotes repo","code":""},{"path":"https://docs.ropensci.org/git2r/reference/remote_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the remote url for remotes in a repo — remote_url","text":"","code":"remote_url(repo = \".\", remote = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/remote_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the remote url for remotes in a repo — remote_url","text":"repo path repository git_repository object. Default '.' remote Character vector remotes get url . Default remotes repository.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/remote_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the remote url for remotes in a repo — remote_url","text":"Character vector remote_url remote","code":""},{"path":"https://docs.ropensci.org/git2r/reference/remote_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the remote url for remotes in a repo — remote_url","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user and commit a file config(repo, user.name=\"Alice\", user.email=\"alice@example.org\") writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Add a remote remote_add(repo, \"playground\", \"https://example.org/git2r/playground\") remotes(repo) remote_url(repo, \"playground\")  ## Rename a remote remote_rename(repo, \"playground\", \"foobar\") remotes(repo) remote_url(repo, \"foobar\")  ## Set remote url remote_set_url(repo, \"foobar\", \"https://example.org/git2r/foobar\") remotes(repo) remote_url(repo, \"foobar\")  ## Remove a remote remote_remove(repo, \"foobar\") remotes(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/remotes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the configured remotes for a repo — remotes","title":"Get the configured remotes for a repo — remotes","text":"Get configured remotes repo","code":""},{"path":"https://docs.ropensci.org/git2r/reference/remotes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the configured remotes for a repo — remotes","text":"","code":"remotes(repo = \".\")"},{"path":"https://docs.ropensci.org/git2r/reference/remotes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the configured remotes for a repo — remotes","text":"repo path repository git_repository object. Default '.'","code":""},{"path":"https://docs.ropensci.org/git2r/reference/remotes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the configured remotes for a repo — remotes","text":"Character vector remotes","code":""},{"path":"https://docs.ropensci.org/git2r/reference/remotes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the configured remotes for a repo — remotes","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user and commit a file config(repo, user.name=\"Alice\", user.email=\"alice@example.org\") writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Add a remote remote_add(repo, \"playground\", \"https://example.org/git2r/playground\") remotes(repo) remote_url(repo, \"playground\")  ## Rename a remote remote_rename(repo, \"playground\", \"foobar\") remotes(repo) remote_url(repo, \"foobar\")  ## Set remote url remote_set_url(repo, \"foobar\", \"https://example.org/git2r/foobar\") remotes(repo) remote_url(repo, \"foobar\")  ## Remove a remote remote_remove(repo, \"foobar\") remotes(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/repository.html","id":null,"dir":"Reference","previous_headings":"","what":"Open a repository — repository","title":"Open a repository — repository","text":"Open repository","code":""},{"path":"https://docs.ropensci.org/git2r/reference/repository.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open a repository — repository","text":"","code":"repository(path = \".\", discover = TRUE)"},{"path":"https://docs.ropensci.org/git2r/reference/repository.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open a repository — repository","text":"path path existing local git repository. discover Discover repository path. Default TRUE.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/repository.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open a repository — repository","text":"git_repository object entries: path Path git repository","code":""},{"path":"https://docs.ropensci.org/git2r/reference/repository.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open a repository — repository","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  # Configure a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create a file, add and commit writeLines(\"Hello world!\", file.path(path, \"test-1.txt\")) add(repo, 'test-1.txt') commit_1 <- commit(repo, \"Commit message\")  ## Make one more commit writeLines(c(\"Hello world!\", \"HELLO WORLD!\"),            file.path(path, \"test-1.txt\")) add(repo, 'test-1.txt') commit(repo, \"Next commit message\")  ## Create one more file writeLines(\"Hello world!\",            file.path(path, \"test-2.txt\"))  ## Brief summary of repository repo  ## Summary of repository summary(repo)  ## Workdir of repository workdir(repo)  ## Check if repository is bare is_bare(repo)  ## Check if repository is empty is_empty(repo)  ## Check if repository is a shallow clone is_shallow(repo)  ## List all references in repository references(repo)  ## List all branches in repository branches(repo)  ## Get HEAD of repository repository_head(repo)  ## Check if HEAD is head is_head(repository_head(repo))  ## Check if HEAD is local is_local(repository_head(repo))  ## List all tags in repository tags(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/repository_head.html","id":null,"dir":"Reference","previous_headings":"","what":"Get HEAD for a repository — repository_head","title":"Get HEAD for a repository — repository_head","text":"Get HEAD repository","code":""},{"path":"https://docs.ropensci.org/git2r/reference/repository_head.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get HEAD for a repository — repository_head","text":"","code":"repository_head(repo = \".\")"},{"path":"https://docs.ropensci.org/git2r/reference/repository_head.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get HEAD for a repository — repository_head","text":"repo path repository git_repository object. Default '.'","code":""},{"path":"https://docs.ropensci.org/git2r/reference/repository_head.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get HEAD for a repository — repository_head","text":"NULL unborn branch found. git_branch     detached head. git_commit detached head","code":""},{"path":"https://docs.ropensci.org/git2r/reference/repository_head.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get HEAD for a repository — repository_head","text":"","code":"if (FALSE) { # \\dontrun{ ## Create and initialize a repository in a temporary directory path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path) config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create a file, add and commit writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"Commit message\")  ## Get HEAD of repository repository_head(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/reset.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset current HEAD to the specified state — reset","title":"Reset current HEAD to the specified state — reset","text":"Reset current HEAD specified state","code":""},{"path":"https://docs.ropensci.org/git2r/reference/reset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset current HEAD to the specified state — reset","text":"","code":"reset(object, reset_type = c(\"soft\", \"mixed\", \"hard\"), path = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/reset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reset current HEAD to the specified state — reset","text":"object Either git_commit, git_repository character vector. object git_commit, HEAD moved git_commit. object git_repository, resets index entries path argument state HEAD. object character vector paths, resets index entries object state HEAD current working directory repository. reset_type object 'git_commit', kind reset operation perform. 'soft' means HEAD moved commit. 'mixed' reset trigger 'soft' reset, plus index replaced content commit tree. 'hard' reset trigger 'mixed' reset working directory replaced content index. path object 'git_repository', resets index entries paths state HEAD.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/reset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reset current HEAD to the specified state — reset","text":"invisible NULL","code":""},{"path":"https://docs.ropensci.org/git2r/reference/reset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reset current HEAD to the specified state — reset","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  # Configure a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create a file, add and commit writeLines(\"Hello world!\", file.path(path, \"test-1.txt\")) add(repo, \"test-1.txt\") commit_1 <- commit(repo, \"Commit message\")  ## Change and stage the file writeLines(c(\"Hello world!\", \"HELLO WORLD!\"), file.path(path, \"test-1.txt\")) add(repo, \"test-1.txt\") status(repo)  ## Unstage file reset(repo, path = \"test-1.txt\") status(repo)  ## Make one more commit add(repo, \"test-1.txt\") commit(repo, \"Next commit message\")  ## Create one more file writeLines(\"Hello world!\", file.path(path, \"test-2.txt\"))  ## 'soft' reset to first commit and check status reset(commit_1) status(repo)  ## 'mixed' reset to first commit and check status commit(repo, \"Next commit message\") reset(commit_1, \"mixed\") status(repo)  ## 'hard' reset to first commit and check status add(repo, \"test-1.txt\") commit(repo, \"Next commit message\") reset(commit_1, \"hard\") status(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/revparse_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Revparse — revparse_single","title":"Revparse — revparse_single","text":"Find object specified revision.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/revparse_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Revparse — revparse_single","text":"","code":"revparse_single(repo = \".\", revision = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/revparse_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Revparse — revparse_single","text":"repo path repository git_repository object. Default '.' revision revision string, see http://git-scm.com/docs/git-rev-parse.html#_specifying_revisions","code":""},{"path":"https://docs.ropensci.org/git2r/reference/revparse_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Revparse — revparse_single","text":"git_commit git_tag git_tree object","code":""},{"path":"https://docs.ropensci.org/git2r/reference/revparse_single.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Revparse — revparse_single","text":"","code":"if (FALSE) { # \\dontrun{ ## Create a directory in tempdir path <- tempfile(pattern=\"git2r-\") dir.create(path)  ## Initialize a repository repo <- init(path) config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create a file, add and commit lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path, \"test.txt\")) add(repo, \"test.txt\") commit(repo, \"First commit message\")  # Change file and commit lines <- c(   \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\",   \"eiusmod tempor incididunt ut labore et dolore magna aliqua.\") writeLines(lines, file.path(path, \"test.txt\")) add(repo, \"test.txt\") commit(repo, \"Second commit message\")  revparse_single(repo, \"HEAD^\") revparse_single(repo, \"HEAD:test.txt\") } # }"},{"path":"https://docs.ropensci.org/git2r/reference/rm_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove files from the working tree and from the index — rm_file","title":"Remove files from the working tree and from the index — rm_file","text":"Remove files working tree index","code":""},{"path":"https://docs.ropensci.org/git2r/reference/rm_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove files from the working tree and from the index — rm_file","text":"","code":"rm_file(repo = \".\", path = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/rm_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove files from the working tree and from the index — rm_file","text":"repo path repository git_repository object. Default '.' path character vector filenames remove. files known Git removed.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/rm_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove files from the working tree and from the index — rm_file","text":"invisible(NULL)","code":""},{"path":"https://docs.ropensci.org/git2r/reference/rm_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove files from the working tree and from the index — rm_file","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create a file writeLines(\"Hello world!\", file.path(path, \"file-to-remove.txt\"))  ## Add file to repository add(repo, \"file-to-remove.txt\") commit(repo, \"First commit message\")  ## Remove file rm_file(repo, \"file-to-remove.txt\")  ## View status of repository status(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/sha.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the SHA-1 of a git object — sha","title":"Get the SHA-1 of a git object — sha","text":"Get 40 character hexadecimal string SHA-1.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/sha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the SHA-1 of a git object — sha","text":"","code":"sha(object)  # S3 method for class 'git_blob' sha(object)  # S3 method for class 'git_branch' sha(object)  # S3 method for class 'git_commit' sha(object)  # S3 method for class 'git_note' sha(object)  # S3 method for class 'git_reference' sha(object)  # S3 method for class 'git_reflog_entry' sha(object)  # S3 method for class 'git_tag' sha(object)  # S3 method for class 'git_tree' sha(object)  # S3 method for class 'git_fetch_head' sha(object)  # S3 method for class 'git_merge_result' sha(object)"},{"path":"https://docs.ropensci.org/git2r/reference/sha.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the SHA-1 of a git object — sha","text":"object git object get SHA-1 .","code":""},{"path":"https://docs.ropensci.org/git2r/reference/sha.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the SHA-1 of a git object — sha","text":"40 character hexadecimal string SHA-1.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/sha.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the SHA-1 of a git object — sha","text":"","code":"if (FALSE) { # \\dontrun{ ## Create a directory in tempdir path <- tempfile(pattern=\"git2r-\") dir.create(path)  ## Initialize a repository repo <- init(path) config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create a file, add and commit lines <- \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\" writeLines(lines, file.path(path, \"test.txt\")) add(repo, \"test.txt\") commit(repo, \"Commit message 1\")  ## Get the SHA-1 of the last commit sha(last_commit(repo)) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/ssh_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Compose usual path to ssh keys — ssh_path","title":"Compose usual path to ssh keys — ssh_path","text":"function provides consistent means across OS-types access .ssh directory.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/ssh_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compose usual path to ssh keys — ssh_path","text":"","code":"ssh_path(file = \"\")"},{"path":"https://docs.ropensci.org/git2r/reference/ssh_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compose usual path to ssh keys — ssh_path","text":"file basename file path requested","code":""},{"path":"https://docs.ropensci.org/git2r/reference/ssh_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compose usual path to ssh keys — ssh_path","text":"Full path file","code":""},{"path":"https://docs.ropensci.org/git2r/reference/ssh_path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compose usual path to ssh keys — ssh_path","text":"Windows-based systems, path.expand(\"~\") returns \"C:/Users/username/Documents\", whereas usual path .ssh directory \"C:/Users/username\". operating systems, path.expand(\"~\") returns usual path .ssh directory. Calling ssh_path() arguments return usual path .ssh directory.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/ssh_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compose usual path to ssh keys — ssh_path","text":"","code":"ssh_path() #> [1] \"/github/home/.ssh/\" ssh_path(\"is_rsa.pub\") #> [1] \"/github/home/.ssh/is_rsa.pub\""},{"path":"https://docs.ropensci.org/git2r/reference/ssl_cert_locations.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the SSL certificate-authority locations — ssl_cert_locations","title":"Set the SSL certificate-authority locations — ssl_cert_locations","text":"Set SSL certificate-authority locations","code":""},{"path":"https://docs.ropensci.org/git2r/reference/ssl_cert_locations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the SSL certificate-authority locations — ssl_cert_locations","text":"","code":"ssl_cert_locations(filename = NULL, path = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/ssl_cert_locations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the SSL certificate-authority locations — ssl_cert_locations","text":"filename Location file containing several certificates concatenated together. Default NULL. path Location directory holding several certificates, one per file. Default NULL.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/ssl_cert_locations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the SSL certificate-authority locations — ssl_cert_locations","text":"invisible(NULL)","code":""},{"path":"https://docs.ropensci.org/git2r/reference/ssl_cert_locations.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set the SSL certificate-authority locations — ssl_cert_locations","text":"Either parameter may 'NULL', .","code":""},{"path":"https://docs.ropensci.org/git2r/reference/stash.html","id":null,"dir":"Reference","previous_headings":"","what":"Stash — stash","title":"Stash — stash","text":"Stash","code":""},{"path":"https://docs.ropensci.org/git2r/reference/stash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stash — stash","text":"","code":"stash(   repo = \".\",   message = as.character(Sys.time()),   index = FALSE,   untracked = FALSE,   ignored = FALSE,   stasher = NULL )"},{"path":"https://docs.ropensci.org/git2r/reference/stash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stash — stash","text":"repo path repository git_repository object. Default '.' message Optional description. Defaults current time. index changes already added index left intact working directory. Default FALSE untracked untracked files also stashed cleaned working directory. Default FALSE ignored ignored files also stashed cleaned working directory. Default FALSE stasher Signature stasher time stash","code":""},{"path":"https://docs.ropensci.org/git2r/reference/stash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stash — stash","text":"invisible git_stash object anything stash     else NULL","code":""},{"path":"https://docs.ropensci.org/git2r/reference/stash.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stash — stash","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  # Configure a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  # Create a file, add and commit writeLines(\"Hello world!\", file.path(path, \"test.txt\")) add(repo, 'test.txt') commit(repo, \"Commit message\")  # Change file writeLines(c(\"Hello world!\", \"HELLO WORLD!\"), file.path(path, \"test.txt\"))  # Check status of repository status(repo)  # Create stash in repository stash(repo)  # Check status of repository status(repo)  # View stash stash_list(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/stash_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply stash — stash_apply","title":"Apply stash — stash_apply","text":"Apply single stashed state stash list.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/stash_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply stash — stash_apply","text":"","code":"stash_apply(object = \".\", index = 1)"},{"path":"https://docs.ropensci.org/git2r/reference/stash_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply stash — stash_apply","text":"object path repository, git_repository object, stash object pop. Default path = '.' reposiory. index index stash apply. used object path repository git_repository object. Default index = 1.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/stash_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply stash — stash_apply","text":"invisible NULL","code":""},{"path":"https://docs.ropensci.org/git2r/reference/stash_apply.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply stash — stash_apply","text":"local changes working directory conflict changes stash error raised. case, index always remain unmodified files working directory remain unmodified. However, restoring untracked files ignored files conflict applying modified files, files remain working directory.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/stash_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply stash — stash_apply","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  # Configure a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  # Create a file, add and commit writeLines(\"Hello world!\", file.path(path, \"test.txt\")) add(repo, 'test.txt') commit(repo, \"Commit message\")  # Change file writeLines(c(\"Hello world!\", \"HELLO WORLD!\"), file.path(path, \"test.txt\"))  # Create stash in repository stash(repo)  # Change file writeLines(c(\"Hello world!\", \"HeLlO wOrLd!\"), file.path(path, \"test.txt\"))  # Create stash in repository stash(repo)  # View stashes stash_list(repo)  # Read file readLines(file.path(path, \"test.txt\"))  # Apply latest git_stash object in repository stash_apply(stash_list(repo)[[1]])  # Read file readLines(file.path(path, \"test.txt\"))  # View stashes stash_list(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/stash_drop.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop stash — stash_drop","title":"Drop stash — stash_drop","text":"Drop stash","code":""},{"path":"https://docs.ropensci.org/git2r/reference/stash_drop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop stash — stash_drop","text":"","code":"stash_drop(object = \".\", index = 1)"},{"path":"https://docs.ropensci.org/git2r/reference/stash_drop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop stash — stash_drop","text":"object path repository, git_repository object, stash object drop. Default path = '.' reposiory. index index stash drop. used object path repository git_repository object. Default index = 1.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/stash_drop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop stash — stash_drop","text":"invisible NULL","code":""},{"path":"https://docs.ropensci.org/git2r/reference/stash_drop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop stash — stash_drop","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  # Configure a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  # Create a file, add and commit writeLines(\"Hello world!\", file.path(path, \"test.txt\")) add(repo, 'test.txt') commit(repo, \"Commit message\")  # Change file writeLines(c(\"Hello world!\", \"HELLO WORLD!\"), file.path(path, \"test.txt\"))  # Create stash in repository stash(repo)  # Change file writeLines(c(\"Hello world!\", \"HeLlO wOrLd!\"), file.path(path, \"test.txt\"))  # Create stash in repository stash(repo)  # View stashes stash_list(repo)  # Drop git_stash object in repository stash_drop(stash_list(repo)[[1]])  ## Drop stash using an index to stash stash_drop(repo, 1)  # View stashes stash_list(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/stash_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List stashes in repository — stash_list","title":"List stashes in repository — stash_list","text":"List stashes repository","code":""},{"path":"https://docs.ropensci.org/git2r/reference/stash_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List stashes in repository — stash_list","text":"","code":"stash_list(repo = \".\")"},{"path":"https://docs.ropensci.org/git2r/reference/stash_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List stashes in repository — stash_list","text":"repo path repository git_repository object. Default '.'","code":""},{"path":"https://docs.ropensci.org/git2r/reference/stash_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List stashes in repository — stash_list","text":"list stashes repository","code":""},{"path":"https://docs.ropensci.org/git2r/reference/stash_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List stashes in repository — stash_list","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  # Configure a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  # Create a file, add and commit writeLines(\"Hello world!\", file.path(path, \"test-1.txt\")) add(repo, 'test-1.txt') commit(repo, \"Commit message\")  # Make one more commit writeLines(c(\"Hello world!\", \"HELLO WORLD!\"), file.path(path, \"test-1.txt\")) add(repo, 'test-1.txt') commit(repo, \"Next commit message\")  # Create one more file writeLines(\"Hello world!\", file.path(path, \"test-2.txt\"))  # Check that there are no stashes stash_list(repo)  # Stash stash(repo)  # Only untracked changes, therefore no stashes stash_list(repo)  # Stash and include untracked changes stash(repo, \"Stash message\", untracked=TRUE)  # View stash stash_list(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/stash_pop.html","id":null,"dir":"Reference","previous_headings":"","what":"Pop stash — stash_pop","title":"Pop stash — stash_pop","text":"Apply single stashed state stash list remove list successful.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/stash_pop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pop stash — stash_pop","text":"","code":"stash_pop(object = \".\", index = 1)"},{"path":"https://docs.ropensci.org/git2r/reference/stash_pop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pop stash — stash_pop","text":"object path repository, git_repository object, stash object pop. Default path = '.' reposiory. index index stash pop. used object path repository git_repository object. Default index = 1.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/stash_pop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pop stash — stash_pop","text":"invisible NULL","code":""},{"path":"https://docs.ropensci.org/git2r/reference/stash_pop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pop stash — stash_pop","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  # Configure a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  # Create a file, add and commit writeLines(\"Hello world!\", file.path(path, \"test.txt\")) add(repo, 'test.txt') commit(repo, \"Commit message\")  # Change file writeLines(c(\"Hello world!\", \"HELLO WORLD!\"), file.path(path, \"test.txt\"))  # Create stash in repository stash(repo)  # Change file writeLines(c(\"Hello world!\", \"HeLlO wOrLd!\"), file.path(path, \"test.txt\"))  # Create stash in repository stash(repo)  # View stashes stash_list(repo)  # Read file readLines(file.path(path, \"test.txt\"))  # Pop latest git_stash object in repository stash_pop(stash_list(repo)[[1]])  # Read file readLines(file.path(path, \"test.txt\"))  # View stashes stash_list(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/status.html","id":null,"dir":"Reference","previous_headings":"","what":"Status — status","title":"Status — status","text":"Display state repository working directory staging area.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Status — status","text":"","code":"status(   repo = \".\",   staged = TRUE,   unstaged = TRUE,   untracked = TRUE,   ignored = FALSE,   all_untracked = FALSE )"},{"path":"https://docs.ropensci.org/git2r/reference/status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Status — status","text":"repo path repository git_repository object. Default '.' staged Include staged files. Default TRUE. unstaged Include unstaged files. Default TRUE. untracked Include untracked files directories. Default TRUE. ignored Include ignored files. Default FALSE. all_untracked Shows individual files untracked directories untracked TRUE.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Status — status","text":"git_status repository status","code":""},{"path":"https://docs.ropensci.org/git2r/reference/status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Status — status","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Config user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create a file writeLines(\"Hello world!\", file.path(path, \"test.txt\"))  ## Check status; untracked file status(repo)  ## Add file add(repo, \"test.txt\")  ## Check status; staged file status(repo)  ## Commit commit(repo, \"First commit message\")  ## Check status; clean status(repo)  ## Change the file writeLines(c(\"Hello again!\", \"Here is a second line\", \"And a third\"),            file.path(path, \"test.txt\"))  ## Check status; unstaged file status(repo)  ## Add file and commit add(repo, \"test.txt\") commit(repo, \"Second commit message\")  ## Check status; clean status(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/sub-.git_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract object from tree — [.git_tree","title":"Extract object from tree — [.git_tree","text":"Lookup tree entry position tree","code":""},{"path":"https://docs.ropensci.org/git2r/reference/sub-.git_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract object from tree — [.git_tree","text":"","code":"# S3 method for class 'git_tree' x[i]"},{"path":"https://docs.ropensci.org/git2r/reference/sub-.git_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract object from tree — [.git_tree","text":"x tree object index (integer logical) tree object extract. negative values, elements except indicated selected. character vector match names objects extract.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/sub-.git_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract object from tree — [.git_tree","text":"Git object","code":""},{"path":"https://docs.ropensci.org/git2r/reference/sub-.git_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract object from tree — [.git_tree","text":"","code":"if (FALSE) { # \\dontrun{ ##' Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) dir.create(file.path(path, \"subfolder\")) repo <- init(path)  ##' Create a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ##' Create three files and commit writeLines(\"First file\",  file.path(path, \"example-1.txt\")) writeLines(\"Second file\", file.path(path, \"subfolder/example-2.txt\")) writeLines(\"Third file\",  file.path(path, \"example-3.txt\")) add(repo, c(\"example-1.txt\", \"subfolder/example-2.txt\", \"example-3.txt\")) new_commit <- commit(repo, \"Commit message\")  ##' Pick a tree in the repository tree_object <- tree(new_commit)  ##' Display tree tree_object  ##' Select item by name tree_object[\"example-1.txt\"]  ##' Select first item in tree tree_object[1]  ##' Select first three items in tree tree_object[1:3]  ##' Select all blobs in tree tree_object[vapply(as(tree_object, 'list'), is_blob, logical(1))] } # }"},{"path":"https://docs.ropensci.org/git2r/reference/summary.git_repository.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of repository — summary.git_repository","title":"Summary of repository — summary.git_repository","text":"Summary repository","code":""},{"path":"https://docs.ropensci.org/git2r/reference/summary.git_repository.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of repository — summary.git_repository","text":"","code":"# S3 method for class 'git_repository' summary(object, ...)"},{"path":"https://docs.ropensci.org/git2r/reference/summary.git_repository.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of repository — summary.git_repository","text":"object repository object ... Additional arguments affecting summary produced.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/summary.git_repository.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of repository — summary.git_repository","text":"None (invisible 'NULL').","code":""},{"path":"https://docs.ropensci.org/git2r/reference/summary.git_repository.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of repository — summary.git_repository","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Config user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Create a file writeLines(\"Hello world!\", file.path(path, \"test.txt\")) summary(repo)  ## Add file add(repo, \"test.txt\") summary(repo)  ## Commit commit(repo, \"First commit message\") summary(repo)  ## Change the file writeLines(c(\"Hello again!\", \"Here is a second line\", \"And a third\"),            file.path(path, \"test.txt\")) summary(repo)  ## Add file and commit add(repo, \"test.txt\") commit(repo, \"Second commit message\") summary(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/summary.git_stash.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of a stash — summary.git_stash","title":"Summary of a stash — summary.git_stash","text":"Summary stash","code":""},{"path":"https://docs.ropensci.org/git2r/reference/summary.git_stash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of a stash — summary.git_stash","text":"","code":"# S3 method for class 'git_stash' summary(object, ...)"},{"path":"https://docs.ropensci.org/git2r/reference/summary.git_stash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of a stash — summary.git_stash","text":"object stash object ... Additional arguments affecting summary produced.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/summary.git_stash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of a stash — summary.git_stash","text":"None (invisible 'NULL').","code":""},{"path":"https://docs.ropensci.org/git2r/reference/summary.git_stash.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of a stash — summary.git_stash","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  # Configure a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  # Create a file, add and commit writeLines(\"Hello world!\", file.path(path, \"test.txt\")) add(repo, 'test.txt') commit(repo, \"Commit message\")  # Change file writeLines(c(\"Hello world!\", \"HELLO WORLD!\"), file.path(path, \"test.txt\"))  # Create stash in repository stash(repo, \"Stash message\")  # View summary of stash summary(stash_list(repo)[[1]]) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/summary.git_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of tree — summary.git_tree","title":"Summary of tree — summary.git_tree","text":"Summary tree","code":""},{"path":"https://docs.ropensci.org/git2r/reference/summary.git_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of tree — summary.git_tree","text":"","code":"# S3 method for class 'git_tree' summary(object, ...)"},{"path":"https://docs.ropensci.org/git2r/reference/summary.git_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of tree — summary.git_tree","text":"object tree object ... Additional arguments affecting summary produced.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/summary.git_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of tree — summary.git_tree","text":"None (invisible 'NULL').","code":""},{"path":"https://docs.ropensci.org/git2r/reference/summary.git_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of tree — summary.git_tree","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user and commit a file config(repo, user.name = \"Alice\", user.email = \"alice@example.org\") writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  summary(tree(last_commit(repo))) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Create tag targeting HEAD commit in repository — tag","title":"Create tag targeting HEAD commit in repository — tag","text":"Create tag targeting HEAD commit repository","code":""},{"path":"https://docs.ropensci.org/git2r/reference/tag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create tag targeting HEAD commit in repository — tag","text":"","code":"tag(   object = \".\",   name = NULL,   message = NULL,   session = FALSE,   tagger = NULL,   force = FALSE )"},{"path":"https://docs.ropensci.org/git2r/reference/tag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create tag targeting HEAD commit in repository — tag","text":"object repository object. name Name tag. message tag message. Specify tag message create annotated tag. lightweight tag created message parameter NULL. session Add sessionInfo tag message. Default FALSE. tagger tagger (author) tag force Overwrite existing tag. Default = FALSE","code":""},{"path":"https://docs.ropensci.org/git2r/reference/tag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create tag targeting HEAD commit in repository — tag","text":"invisible(git_tag) object","code":""},{"path":"https://docs.ropensci.org/git2r/reference/tag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create tag targeting HEAD commit in repository — tag","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Commit a text file filename <- file.path(path, \"example.txt\") writeLines(\"Hello world!\", filename) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Create an annotated tag tag(repo, \"v1.0\", \"Tag message\")  ## List tags tags(repo)  ## Make a change to the text file and commit. writeLines(c(\"Hello world!\", \"HELLO WORLD!\"), filename) add(repo, \"example.txt\") commit(repo, \"Second commit message\")  ## Create a lightweight tag tag(repo, \"v2.0\")  ## List tags tags(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/tag_delete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete an existing tag reference — tag_delete","title":"Delete an existing tag reference — tag_delete","text":"Delete existing tag reference","code":""},{"path":"https://docs.ropensci.org/git2r/reference/tag_delete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete an existing tag reference — tag_delete","text":"","code":"tag_delete(object = \".\", name = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/tag_delete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete an existing tag reference — tag_delete","text":"object Can either path (default \".\") repository, git_repository object, git_tag object. tag name. name object argument path repository git_repository, name tag delete.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/tag_delete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete an existing tag reference — tag_delete","text":"invisible(NULL)","code":""},{"path":"https://docs.ropensci.org/git2r/reference/tag_delete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete an existing tag reference — tag_delete","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Commit a text file writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Create two tags tag(repo, \"Tag1\", \"Tag message 1\") t2 <- tag(repo, \"Tag2\", \"Tag message 2\")  ## List the two tags in the repository tags(repo)  ## Delete the two tags in the repository tag_delete(repo, \"Tag1\") tag_delete(t2)  ## Show the empty list with tags in the repository tags(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Tags — tags","title":"Tags — tags","text":"Tags","code":""},{"path":"https://docs.ropensci.org/git2r/reference/tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tags — tags","text":"","code":"tags(repo = \".\")"},{"path":"https://docs.ropensci.org/git2r/reference/tags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tags — tags","text":"repo path repository git_repository object. Default '.'","code":""},{"path":"https://docs.ropensci.org/git2r/reference/tags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tags — tags","text":"list tags repository","code":""},{"path":"https://docs.ropensci.org/git2r/reference/tags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tags — tags","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a user config(repo, user.name = \"Alice\", user.email = \"alice@example.org\")  ## Commit a text file writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Create tag tag(repo, \"Tagname\", \"Tag message\")  ## List tags tags(repo) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Tree — tree","title":"Tree — tree","text":"Get tree pointed commit stash.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tree — tree","text":"","code":"tree(object = NULL)"},{"path":"https://docs.ropensci.org/git2r/reference/tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tree — tree","text":"object commit stash object","code":""},{"path":"https://docs.ropensci.org/git2r/reference/tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tree — tree","text":"S3 class git_tree object","code":""},{"path":"https://docs.ropensci.org/git2r/reference/tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tree — tree","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a first user and commit a file config(repo, user.name = \"Alice\", user.email = \"alice@example.org\") writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  tree(last_commit(repo)) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/when.html","id":null,"dir":"Reference","previous_headings":"","what":"When — when","title":"When — when","text":"Help method extract time character string git_commit, git_signature, git_tag git_time object.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/when.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"When — when","text":"","code":"when(object, tz = \"GMT\", origin = \"1970-01-01\", usetz = TRUE)"},{"path":"https://docs.ropensci.org/git2r/reference/when.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"When — when","text":"object object extract time slot . tz character string.  time zone specification used     conversion, one required.  System-specific (see     time zones), \"\" current time zone,     \"GMT\" UTC (Universal Time, Coordinated).  Invalid values     commonly treated UTC, platforms warning. origin date-time object, something can coerced     .POSIXct(tz = \"GMT\") object.  Optional since R     4.3.0, equivalent \"1970-01-01\" used. usetz logical.  time zone abbreviation appended     output?  used printing times, reliable     using \"%Z\".","code":""},{"path":"https://docs.ropensci.org/git2r/reference/when.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"When — when","text":"character vector length one.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/reference/when.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"When — when","text":"","code":"if (FALSE) { # \\dontrun{ ## Initialize a temporary repository path <- tempfile(pattern=\"git2r-\") dir.create(path) repo <- init(path)  ## Create a first user and commit a file config(repo, user.name = \"Alice\", user.email = \"alice@example.org\") writeLines(\"Hello world!\", file.path(path, \"example.txt\")) add(repo, \"example.txt\") commit(repo, \"First commit message\")  ## Create tag tag(repo, \"Tagname\", \"Tag message\")  when(commits(repo)[[1]]) when(tags(repo)[[1]]) when(tags(repo)[[1]], tz = Sys.timezone()) } # }"},{"path":"https://docs.ropensci.org/git2r/reference/workdir.html","id":null,"dir":"Reference","previous_headings":"","what":"Workdir of repository — workdir","title":"Workdir of repository — workdir","text":"Workdir repository","code":""},{"path":"https://docs.ropensci.org/git2r/reference/workdir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Workdir of repository — workdir","text":"","code":"workdir(repo = \".\")"},{"path":"https://docs.ropensci.org/git2r/reference/workdir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workdir of repository — workdir","text":"repo path repository git_repository object. Default '.'","code":""},{"path":"https://docs.ropensci.org/git2r/reference/workdir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Workdir of repository — workdir","text":"Character vector path workdir. repository bare, NULL returned.","code":""},{"path":"https://docs.ropensci.org/git2r/reference/workdir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Workdir of repository — workdir","text":"","code":"if (FALSE) { # \\dontrun{ ## Create a directory in tempdir path <- tempfile(pattern=\"git2r-\") dir.create(path)  ## Initialize a repository repo <- init(path)  ## Get the path of the workdir for repository workdir(repo) } # }"},{"path":[]},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0350-2024-10-20","dir":"Changelog","previous_headings":"","what":"git2r 0.35.0 (2024-10-20)","title":"git2r 0.35.0 (2024-10-20)","text":"CRAN release: 2024-10-20","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-35-0","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.35.0 (2024-10-20)","text":"bundled libgit2 source code removed libgit2 must now installed system. Fix build API change libgit2 1.8.0. system requirement libgit2 updated libgit2 version >= 1.0. Add $(C_VISIBILITY) compiler flags hide internal symbols shared object. MacOS, libgit2 found, build configuration tries download static build libgit2 version 1.8.1 (https://github.com/autobrew/bundler/releases/tag/libgit2-1.8.1) use instead, sha256 downloaded ‘libgit2-1.8.1-universal.tar.xz’ file checked.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0330-2023-11-26","dir":"Changelog","previous_headings":"","what":"git2r 0.33.0 (2023-11-26)","title":"git2r 0.33.0 (2023-11-26)","text":"CRAN release: 2023-11-26","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-33-0","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.33.0 (2023-11-26)","text":"Added missing ‘git2r-package’ alias documentation. Added argument ‘raw’ ‘content’ function make possible get blob content raw vector, see issue #461. Updated bundled libgit2 source code version 1.7.1. Changed R dependency >= 3.4 >= 4.0. Added missing ‘-liconv’ PKG_LIBS Makevars.win.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0320-2023-04-12","dir":"Changelog","previous_headings":"","what":"git2r 0.32.0 (2023-04-12)","title":"git2r 0.32.0 (2023-04-12)","text":"CRAN release: 2023-04-12","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-32-0","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.32.0 (2023-04-12)","text":"Updated bundled libgit2 source code version 1.6.3. Fix build failure bundled libgit2 structure nanosecond type mssing.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0310-2023-01-26","dir":"Changelog","previous_headings":"","what":"git2r 0.31.0 (2023-01-26)","title":"git2r 0.31.0 (2023-01-26)","text":"CRAN release: 2023-01-26","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-31-0","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.31.0 (2023-01-26)","text":"Removed unused macro ‘AC_PROG_CC’ build configuration script.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0301-2022-03-15","dir":"Changelog","previous_headings":"","what":"git2r 0.30.1 (2022-03-15)","title":"git2r 0.30.1 (2022-03-15)","text":"CRAN release: 2022-03-16","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-30-1","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.30.1 (2022-03-15)","text":"Added build configuration script (‘src/Makevars.ucrt’) Windows UCRT. Thanks Tomas Kalibera providing patch. Added documentation line endings diff function. Different operating systems handle line endings differently avoid problems diffs, Git can configured handle differences line endings","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0290-2021-11-18","dir":"Changelog","previous_headings":"","what":"git2r 0.29.0 (2021-11-18)","title":"git2r 0.29.0 (2021-11-18)","text":"CRAN release: 2021-11-22","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-29-0","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.29.0 (2021-11-18)","text":"Added ‘branch’ argument ‘init’ function make possible specify branch name. Updated build configuration script Windows MacOS use libgit2 version 1.3.0. Updated bundled libgit2 source code version 1.3.0. Renamed NEWS file NEWS.md changed use markdown format style.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0280-2021-01-10","dir":"Changelog","previous_headings":"","what":"git2r 0.28.0 (2021-01-10)","title":"git2r 0.28.0 (2021-01-10)","text":"CRAN release: 2021-01-10","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"improvements-0-28-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"git2r 0.28.0 (2021-01-10)","text":"Updated use libgit2 version 1.1.0 Windows. Fix handling symbolic reference checking previous branch. Added configure option ‘–without-libgit2’ ignore presence system libgit2 library instead use internal git2r libgit2 library. Usage: R CMD INSTALL –configure-args=‘–without-libgit2’ git2r_x.y.z.tar.gz Updated tests work libgit2 version 1.1.0.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0271-2020-05-03","dir":"Changelog","previous_headings":"","what":"git2r 0.27.1 (2020-05-03)","title":"git2r 0.27.1 (2020-05-03)","text":"CRAN release: 2020-05-03","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-27-1","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.27.1 (2020-05-03)","text":"Fixed CITATION file pass ‘R CMD check’ without NOTE.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"improvements-0-27-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"git2r 0.27.0 (2020-05-01)","text":"Updated bundled libgit2 source code version ‘0.28.5’. Updated build configuration script able build git2r system installation libgit2 version >= 1.0. Updated use libgit2 version 1.0.0 Windows. build configuration script checks minimum required version libssh2 (version >= 1.8). Issue #420. Updated use roxygen2 version 7.1.0 build documentation. Make easier view change timezone (John Blischak #408). Fixed ‘ls_tree’ handle content subfolder, see description PR #402. ‘branch_create’ function changed use ‘last_commit()’ function default determine commit new branch point.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0261-2019-06-30","dir":"Changelog","previous_headings":"","what":"git2r 0.26.1 (2019-06-30)","title":"git2r 0.26.1 (2019-06-30)","text":"CRAN release: 2019-06-29","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"bug-fixes-0-26-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"git2r 0.26.1 (2019-06-30)","text":"Fixed broken build Solaris.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0260-2019-06-29","dir":"Changelog","previous_headings":"","what":"git2r 0.26.0 (2019-06-29)","title":"git2r 0.26.0 (2019-06-29)","text":"CRAN release: 2019-06-29","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"improvements-0-26-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"git2r 0.26.0 (2019-06-29)","text":"Updated bundled libgit2 source code version ‘0.28.2’. Added ‘force’ argument ‘tag’ function overwrite existing tag. Allow zero length tag message. Make possible create lighweight tag. Added ‘ref’ argument ‘commits’ function give reference list commits . Added utility function ‘lookup_commit’ lookup commit related git object. ‘path’ argument added ‘commits’ function make possible specify commits modifying file (‘path’) returned reproduce ‘git log’ ‘–-follow’, see documentation. (Peter Carbonetto John Blischak PR #372)","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"bug-fixes-0-26-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"git2r 0.26.0 (2019-06-29)","text":"Removed timezone offset commit time fix incorrect time GMT reading information repository (Thierry Onkelinx PR #393).","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0252-2019-03-20","dir":"Changelog","previous_headings":"","what":"git2r 0.25.2 (2019-03-20)","title":"git2r 0.25.2 (2019-03-20)","text":"CRAN release: 2019-03-19","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-25-2","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.25.2 (2019-03-20)","text":"Improved build configuration script: system installation libgit2 old, use bundled libgit2 instead raising error.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"bug-fixes-0-25-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"git2r 0.25.2 (2019-03-20)","text":"Fixed broken build Solaris.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0251-2019-03-17","dir":"Changelog","previous_headings":"","what":"git2r 0.25.1 (2019-03-17)","title":"git2r 0.25.1 (2019-03-17)","text":"CRAN release: 2019-03-17","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"bug-fixes-0-25-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"git2r 0.25.1 (2019-03-17)","text":"Fixed significant warning ‘R CMD check’","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-25-0","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.25.0 (2019-03-17)","text":"Updated bundled libgit2 source code version ‘0.28.1’. Added additional parameters ‘diff’ function control output, see documentation. Added getPass option password argument ‘cred_user_pass’ (Annie Wang PR #383) Changed ‘print’ functions return argument invisibly. Changed ‘git_config_files’ function return ‘data.frame’ Changed ‘ahead_behind’ function accept tag branch local upstrean commit. Changed ‘descendent_of’ function accept tag branch ‘commit’ ‘ancestor’ commit.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"bug-fixes-0-25-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"git2r 0.25.0 (2019-03-17)","text":"Fixed memory protection errors git2r C source code reported ‘rchk’ tool. Fixed listing ‘commits’ shallow repository. Fixed configuration script include missing macro ‘AM_ICONV’.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0240-2019-01-07","dir":"Changelog","previous_headings":"","what":"git2r 0.24.0 (2019-01-07)","title":"git2r 0.24.0 (2019-01-07)","text":"CRAN release: 2019-01-07 bug-fix release.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"bug-fixes-0-24-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"git2r 0.24.0 (2019-01-07)","text":"Fixed memory protection errors git2r C source code reported ‘rchk’ tool. Raise error path argument ‘hashfile’ function NA.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0230-2018-07-17","dir":"Changelog","previous_headings":"","what":"git2r 0.23.0 (2018-07-17)","title":"git2r 0.23.0 (2018-07-17)","text":"CRAN release: 2018-07-17","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"improvements-0-23-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"git2r 0.23.0 (2018-07-17)","text":"Updated bundled libgit2 source code v0.27.3 (504bd54).","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"breaking-change-0-23-0","dir":"Changelog","previous_headings":"","what":"BREAKING CHANGE","title":"git2r 0.23.0 (2018-07-17)","text":"macOS, git2r longer enables SSH transport default. due complexity build dependencies SSH transport R package macOS longer ships OpenSSL headers. However, can install git2r source macOS (see ‘R Installation Administration’ manual) SSH transport enabled first install libgit2 library, example, using Homebrew package manager. Another possibility let build configuration automatically download libgit2 library Homebrew package manager : install.packages(‘git2r’, type=‘source’, configure.vars=‘autobrew=yes’)","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0221-2018-07-10","dir":"Changelog","previous_headings":"","what":"git2r 0.22.1 (2018-07-10)","title":"git2r 0.22.1 (2018-07-10)","text":"CRAN release: 2018-07-10","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"new-features-0-22-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"git2r 0.22.1 (2018-07-10)","text":"Added ‘git_config_files’ method locate configuration files. Added ‘stash_pop’ method apply single stashed state stash list remove list successful. Added ‘stash_apply’ method apply single stashed state stash list.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"improvements-0-22-1","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"git2r 0.22.1 (2018-07-10)","text":"Updated bundled libgit2 source code v0.27.2 (8d36dc6). git2r can now build system installation libgit2 (Elliott Sales de Andrade PR #345, #344 #336). Refactoring configuration scripts use prebuilt libgit2 macOS Windows (Thanks Jeroen). Ensure git2r writes config file correct location Windows (John Blischak PR #320). Better default location find ssh keys ‘cred_ssh_key()’ (Ian Lyttle PR #317).","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"bug-fixes-0-22-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"git2r 0.22.1 (2018-07-10)","text":"merge results change, returned ‘git_merge_result’ now returns ‘FALSE’ ‘fast_forward’ ‘conflicts’ ‘NA’ ‘sha’. Previously returned ‘logical(0)’ ‘fast_forward’ ‘conflicts’ ‘character(0)’ ‘sha’.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"breaking-changes-0-22-1","dir":"Changelog","previous_headings":"","what":"BREAKING CHANGES","title":"git2r 0.22.1 (2018-07-10)","text":"Changed S4 classes S3 classes simplify design facilitate future development. Removed trailing slash directory name reporting repository path workdir. Removed ‘libgit2_sha’ method. Use ‘libgit2_version’ method instead. Changed ‘stash_drop’ argument ‘index’ zero-based one-based .e. use index = 1 drop first stash.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0210-2018-01-04","dir":"Changelog","previous_headings":"","what":"git2r 0.21.0 (2018-01-04)","title":"git2r 0.21.0 (2018-01-04)","text":"CRAN release: 2018-01-04 Added methods ‘odb_blobs’ ‘odb_objects’ missing repository signature. Internally, use ‘getwd’ ‘discover_repository’ open repository.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"bug-fixes-0-21-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"git2r 0.21.0 (2018-01-04)","text":"bundled libgit2 source code reverted libgit2 v0.26.0 (15e1193) 14 June 2017 (git2r v0.19.0) fix memory alignment errors.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0200-2017-12-17","dir":"Changelog","previous_headings":"","what":"git2r 0.20.0 (2017-12-17)","title":"git2r 0.20.0 (2017-12-17)","text":"CRAN release: 2017-12-17","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"improvements-0-20-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"git2r 0.20.0 (2017-12-17)","text":"Updated bundled libgit2 source code commit (fa8cf14) 16 December 2017. Improvements build configuration script.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"bug-fixes-0-20-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"git2r 0.20.0 (2017-12-17)","text":"Fixed internal callback remote host authentication hanging indefinitely querying ssh-agent credentials. Now, callback signals error instead trying authentication failed first time.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0190-2017-07-19","dir":"Changelog","previous_headings":"","what":"git2r 0.19.0 (2017-07-19)","title":"git2r 0.19.0 (2017-07-19)","text":"CRAN release: 2017-07-19","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"improvements-0-19-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"git2r 0.19.0 (2017-07-19)","text":"Updated bundled libgit2 source code commit (15e1193) (v0.26.0) 14 June 2017. Added ‘checkout’ argument ‘clone()’. Allows control whether checkout HEAD performed clone complete. Setting ‘checkout=FALSE’ similar effect git command line option ‘–-checkout’. Andrzej K. Oles #282.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"bug-fixes-0-19-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"git2r 0.19.0 (2017-07-19)","text":"Fixed memory protection errors git2r C source code reported ‘rchk’ tool. Added missing calls ‘R_forceSymbols’ ‘R_useDynamicSymbols’ C init function. Enable argument ‘’ commit multiple modified (deleted) files. John Blischak #283 Changed configure script determine architecture machine earlier order fix unsupported architecture error encountered CentOS (#268, #288).","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0180-2017-01-01","dir":"Changelog","previous_headings":"","what":"git2r 0.18.0 (2017-01-01)","title":"git2r 0.18.0 (2017-01-01)","text":"CRAN release: 2017-01-01","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"bug-fixes-0-18-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"git2r 0.18.0 (2017-01-01)","text":"bug-fix release solve error introduced build configuration mac version 0.17.0. package failed ‘unable load shared object’, see issue #267.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0170-2016-12-29","dir":"Changelog","previous_headings":"","what":"git2r 0.17.0 (2016-12-29)","title":"git2r 0.17.0 (2016-12-29)","text":"CRAN release: 2016-12-28","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"improvements-0-17-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"git2r 0.17.0 (2016-12-29)","text":"Updated bundled libgit2 source code commit (6b0510e) 20 December 2016. Static linking LibSSH2 mac support redistributable binary package SSH transport enabled. Version 1.8.0 LibSSH2 downloaded built ‘https://www.libssh2.org/download/’.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0160-2016-11-20","dir":"Changelog","previous_headings":"","what":"git2r 0.16.0 (2016-11-20)","title":"git2r 0.16.0 (2016-11-20)","text":"CRAN release: 2016-11-20","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"improvements-0-16-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"git2r 0.16.0 (2016-11-20)","text":"Updated libgit2 source code commit (6b0510e) 17 November 2016. Add option ‘all_untracked’ ‘status’ method show individual files untracked directories ‘untracked’ option TRUE. Add ‘tag_delete’ method delete existing tag reference. Update build configuration support OpenSSL 1.1.0. ‘getPass’ package installed ‘cred_ssh_key’ method create new passphrase-protected ssh key credential object call ‘getPass::getPass()’ method private key passphrase protected allow interactive input passphrase. ‘getPass’ package suggested package. (Peter Meissner PR #254) Add ‘path’ argument ‘reset’ method enable path-specific unstage, .e. resets index entries paths state HEAD","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"bug-fixes-0-16-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"git2r 0.16.0 (2016-11-20)","text":"Build configuration: use portable string equality comparison operator. fixes build e.g. without Bash /bin/sh. (Sander Maijers PR #243).","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0150-2016-05-11","dir":"Changelog","previous_headings":"","what":"git2r 0.15.0 (2016-05-11)","title":"git2r 0.15.0 (2016-05-11)","text":"CRAN release: 2016-05-11","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"improvements-0-15-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"git2r 0.15.0 (2016-05-11)","text":"Build configuration: ‘pkg-config’ now used find ‘libssl’, possible (Elias Pipping PR #231). Added method coerce ‘git_commit’ object ‘data.frame’. Added method ‘is_branch’ check object ‘git_branch’.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"bug-fixes-0-15-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"git2r 0.15.0 (2016-05-11)","text":"Build configuration: fixed installation parallel make (Kirill Müller PR #228).","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0140-2016-03-13","dir":"Changelog","previous_headings":"","what":"git2r 0.14.0 (2016-03-13)","title":"git2r 0.14.0 (2016-03-13)","text":"CRAN release: 2016-03-13","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"improvements-0-14-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"git2r 0.14.0 (2016-03-13)","text":"Updated libgit2 source code commit (785d8c48) 2016-03-04. release v0.24.0 libgit2. Refactoring build scripts. Added check configuration key valid setting configuration variable output warning key invalid. status method now prints “working directory clean” instead nothing working directory clean. Added ‘refspec’ argument ‘fetch’ method specify refs fetch local refs update. Added workaround ‘commit’ method list commits shallow clone since libgit2 library yet support .","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0131-2015-12-10","dir":"Changelog","previous_headings":"","what":"git2r 0.13.1 (2015-12-10)","title":"git2r 0.13.1 (2015-12-10)","text":"CRAN release: 2015-12-10","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"bug-fixes-0-13-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"git2r 0.13.1 (2015-12-10)","text":"bug-fix release solve problems introduced version 0.12.1: bundled libgit2 source code reverted commit (98f7bd2) 2015-08-05 (v0.11.0) fix memory alignment errors (clang-UBSAN gcc-UBSAN). OpenSSL now used OS X provide cryptographic support HTTPS connections fix significant compiler warning (arithmetic pointer void GNU extension [-Wpointer-arith]) r-devel-osx-x86_64-clang. Several fixes build configuration non-Windows platforms.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0121-2015-12-05","dir":"Changelog","previous_headings":"","what":"git2r 0.12.1 (2015-12-05)","title":"git2r 0.12.1 (2015-12-05)","text":"CRAN release: 2015-12-05","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"new-features-0-12-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"git2r 0.12.1 (2015-12-05)","text":"Add ‘remote_ls’ method list references remote repository akin git ls-remote command. Add ‘remote_set_url’ method set remote’s url configuration. Add ‘cred_token’ S4 class hold name environmental variable secret. Default value name GITHUB_PAT. now possible checkout specific file ‘checkout’ method. Add ‘ssl_cert_locations’ method set libgit2 global option ‘GIT_OPT_SET_SSL_CERT_LOCATIONS’ Add ‘ceiling’ argument ‘discover_repository’ method prevent search walking parent directories.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-12-1","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.12.1 (2015-12-05)","text":"Improvments cred_* functions documentation. Add following default arguments ‘cred_ssh_key’ method: publickey = ‘~/.ssh/id_rsa.pub’ privatekey = ‘~/.ssh/id_rsa’ OSX, cascade CPPFLAGS LDFLAGS libssh2 build allow libssh2 built user-installed openssl, discovered configure R’s Makeconf. Necessary build OS X ≥ 10.11 OS X, SecureTransport now used provide cryptographic support HTTPS connections insead OpenSSL. search libssh2 configuration (non Windows) now done via pkg-config. Update OpenSSL Windows v1.0.2d Update libgit2 source code commit (3f5877d) 2015-11-12.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"bug-fixes-0-12-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"git2r 0.12.1 (2015-12-05)","text":"Add missing credentials argument pull method. Fix config failure user.name user.email passed variables. Include ‘configure.ac’ distribution.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0110-2015-08-12","dir":"Changelog","previous_headings":"","what":"git2r 0.11.0 (2015-08-12)","title":"git2r 0.11.0 (2015-08-12)","text":"CRAN release: 2015-08-12","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"new-features-0-11-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"git2r 0.11.0 (2015-08-12)","text":"Add punch card plot. Add branch argument clone name branch checkout. Add ‘force’ argument ‘add’ method add ignored files. following methods can now called without repository argument: ‘branches’, ‘references’, ‘remotes’, ‘tags’ ‘workdir’. methods called without repository argument, repository searched ‘discover_repository’ current working directory. Add name branch item branch_list. Add name tag item tags list. Add S4 class ‘cred_env’ pass credentials environment variables. SSH transport Windows. requires ‘LibSSH2’ ‘OpenSSL’. two libraries downloaded ‘https://github.com/rwinlib’ configuration package. Static linking LibSSH2 OSX support redistributable binary package SSH transport enabled. Version 1.6.0 LibSSH2 downloaded built ‘https://github.com/libssh2/libssh2’.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"improvements-0-11-0","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"git2r 0.11.0 (2015-08-12)","text":"Better summary output S4 classes ‘git_commit’ ‘git_repository’. Updated libgit2 source code commit (98f7bd2) 2015-08-05.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"bug-fixes-0-11-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"git2r 0.11.0 (2015-08-12)","text":"Add imports DESCRIPTION fix CRAN notes. Fix plot function use repository argument ‘x’ Update configuration build OpenBSD. Fix checkout branch empty repository. Fix path argument rm_file. Internal refactoring C code raise error prevent segfault.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-0101-2015-05-07","dir":"Changelog","previous_headings":"","what":"git2r 0.10.1 (2015-05-07)","title":"git2r 0.10.1 (2015-05-07)","text":"CRAN release: 2015-05-07","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-10-1","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.10.1 (2015-05-07)","text":"Rename ‘bundle_repo’ method ‘bundle_r_package’","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"new-features-0-10-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"git2r 0.10.0 (2015-05-07)","text":"Added method libgit2_sha returns commit id libgit2 library bundled source code based . Added method in_repository determine directory git repository.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-10-0","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.10.0 (2015-05-07)","text":"Add brief summary five latest commits summarizing git_respository. Added argument ‘n’ commits method limit number commits output. Added following methods missing repository signature; commits, is_shallow, is_empty, is_detached, repository status. Internally, methods use getwd discover_repository open repository. Changed configuration raise error OpenSSL library found non-Windows systems. Changed configuration raise error iconv library found OSX. Removed print configuration config method. Changed return S3 class git_config. Removed print status status method. Changed return S3 class git_status.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"bug-fixes-0-10-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"git2r 0.10.0 (2015-05-07)","text":"Use OPENSSL_INCLUDES variable build Solaris. Use bundled regex library Solaris. git2 0.9 (2015-04-25)","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-10-0-1","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.10.0 (2015-05-07)","text":"Single quote ‘libgit2’ ‘Git’ Description field git2 0.8 (2015-04-24)","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-10-0-2","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.10.0 (2015-05-07)","text":"Added bare argument clone method create bare repository Added force argument push force local revision remote repo Updated libgit2 source code (2a0f67f) Internal refactoring push","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"new-features-0-10-0-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"git2r 0.10.0 (2015-05-07)","text":"Added method rm_file remove files Added ‘’ argument commit method stage modified deleted files Added shortcut checkout previous branch “-” synonymous “@{-1}” Added session argument commit method add sessionInfo commit message Added session argument tag method add sessionInfo tag message Added method coerce POSIXlt S4 class git_time Added method ‘revparse_single’ find object specified revision Added plot method git2 0.7 (2015-02-23)","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-10-0-3","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.10.0 (2015-05-07)","text":"Update libgit2 source code commit (366e53d) Fix configuration compiler options OpenSSL library found non-Windows platforms","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"git2r-06-2015-02-18","dir":"Changelog","previous_headings":"","what":"git2r 0.6 (2015-02-18)","title":"git2r 0.6 (2015-02-18)","text":"CRAN release: 2015-02-19","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-6","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.6 (2015-02-18)","text":"Update Title Description field DESCRIPTION file.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-5","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.5 (2015-02-17)","text":"Update libgit2 source code commit (a291790) Use Alice Bob placeholder names examples. Add COPYRIGHTS file list copyright holders. Fix significant compiler warnings R CMD check pedantic flag.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-4","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.4 (2015-01-13)","text":"Fix build Windows","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-3","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.3 (2015-01-13)","text":"Internal refactoring merge method merge tests. Update libgit2 source code version v0.22.0","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"bug-fixes-0-3","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"git2r 0.3 (2015-01-13)","text":"Fix build OSX.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"new-features-0-2","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"git2r 0.2 (2015-01-05)","text":"Add method ‘odb_objects’ list objects available database data.frame Add method ‘odb_blobs’ list blobs reachable commits object database.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"documentation-0-2","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION","title":"git2r 0.2 (2015-01-05)","text":"Added examples exported methods.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-2","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.2 (2015-01-05)","text":"Removed ggplot2 dependency. Moved plot functionality ggit package (https://github.com/ropensci/ggit). Renamed note_list method notes Removed markdown_link method Renamed diff merge arguments","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"improvements-0-2","dir":"Changelog","previous_headings":"","what":"IMPROVEMENTS","title":"git2r 0.2 (2015-01-05)","text":"Better performance summarizing contributions. Improved build package.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"bug-fixes-0-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"git2r 0.2 (2015-01-05)","text":"Fixed memory leaks. Fixed use allocVector without protection. Added unload hook unload DLL. Fix tree blob tests use writeChar instead writeLines control line endings.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"new-features-0-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"git2r 0.1 (2014-09-09)","text":"Many new features methods added, see documention description methods : Blob: content, blob_create, hash, hashfile, is_binary, is_blob, length, show, summary. Branch: branch_create, branch_delete, branch_get_upstream, branch_remote_name, branch_remote_url, branch_rename, branch_set_upstream branch_target. Commit: is_commit parents. Diff: diff diff_print. Fetch: fetch fetch_heads. Libgit2: libgit2_features libgit2_version. Merge: merge. Note: note_create, note_default_ref, note_list note_remove. Pull: pull. Push: push. Remote: remote_add, remote_remove, remote_rename remote_url. Repository: discover_repository is_shallow Reset: reset. Stash: stash, stash_drop, stash_list, show summary. Improved error messages give detailed information including function raised error.","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"new-s4-classes-0-1","dir":"Changelog","previous_headings":"","what":"NEW S4 CLASSES","title":"git2r 0.1 (2014-09-09)","text":"cred_ssh_key cred_user_pass git_blame git_blame_hunk git_blob git_diff git_diff_file git_diff_hunk git_diff_line git_fetch_head git_merge_result git_note git_reflog_entry git_stash git_transfer_progress git_tree","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-1","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.1 (2014-09-09)","text":".bare is_bare .empty is_empty .head is_head .local is_local Rename hex sha 40-character SHA-1 hash method arguments S4 class slots.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"new-features-0-0-8","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"git2r 0.0.8 (2014-03-20)","text":"Added method clone repository Added method config set user.name user.email repository Added method status display state repository","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"new-features-0-0-7","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"git2r 0.0.7 (2014-03-16)","text":"Added method create commit","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-0-7","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.0.7 (2014-03-16)","text":"Improved error checking","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"new-features-0-0-6","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"git2r 0.0.6 (2014-02-21)","text":"Added method init create new Git repository","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-0-6","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.0.6 (2014-02-21)","text":"Removed usage testthat package testing package Removed bundled zlib src/zlib instead link zlib shipped R. Dropped usage external pointers, S4 git_repository now keeps track path repository.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-0-5","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.0.5 (2014-01-01)","text":"Renamed S4 class repository git_repository","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"new-features-0-0-5","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"git2r 0.0.5 (2014-01-01)","text":"Added method commits list commits repository Added S4 class git_commit hold infformation commit Added S4 class git_time hold time action Added slot walker S4 class git_repository","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"new-features-0-0-4","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"git2r 0.0.4 (2013-12-30)","text":"Added method remote_url get url remote repository Added method workdir get workdir repository Added method remotes list remotes repository Added S4 class git_signature hold information action signature (e.g. committers, taggers, etc)","code":""},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"changes-0-0-4","dir":"Changelog","previous_headings":"","what":"CHANGES","title":"git2r 0.0.4 (2013-12-30)","text":"Renamed S4 class tag git_tag Renamed S4 class branch git_branch Renamed S4 class reference git_reference","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"new-features-0-0-3","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"git2r 0.0.3 (2013-12-29)","text":"Added method branches list branches Added method head retrieve head Added method .head check branch head Added method .local check branch local Added S4 class branch hold information git branch Added method show reference Added method list references repository Added S4 class reference hold information git reference","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"new-features-0-0-2","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"git2r 0.0.2 (2013-12-28)","text":"Added .bare method check repository bare Added .empty method check repository empty","code":""},{"path":[]},{"path":"https://docs.ropensci.org/git2r/news/index.html","id":"new-features-0-0-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"git2r 0.0.1 (2013-12-28)","text":"Added S4 class repository work git repository Initial package structure","code":""}]
